{"version":3,"sources":["views/components/badgePills/BadgePillGlow.js","views/components/badgePills/BadgeBlock.js","views/components/badgePills/BadgePillLink.js","views/components/badgePills/BadgePillLight.js","views/components/badgePills/BadgeNotification.js","views/components/badgePills/BadgePillContextual.js","views/components/badgePills/BadgePillSourceCode.js","views/components/badgePills/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["BadgePillGlow","className","color","pill","BadgePillBlock","BadgePillLink","href","size","BadgePillLight","BadgePillNotification","BadgePillContextual","badgePillLight","badgePillGlow","badgePillContextual","badgePillNotification","badgePillLink","badgePillBlock","BadgePill","useEffect","Prism","highlightAll","title","data","sm","code","BadgeNotification","md","BreadCrumbs","props","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","end","CardSnippet","children","noBody","iconCode","useState","isOpen","setIsOpen","IconCode","CardBody","onClick"],"mappings":"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","file":"static/js/117.6e07e225.chunk.js","sourcesContent":["// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillGlow = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Badge color='primary' pill className='badge-glow'>\r\n        Primary\r\n      </Badge>\r\n      <Badge color='secondary' pill className='badge-glow'>\r\n        Secondary\r\n      </Badge>\r\n      <Badge color='success' pill className='badge-glow'>\r\n        Success\r\n      </Badge>\r\n      <Badge color='danger' pill className='badge-glow'>\r\n        Danger\r\n      </Badge>\r\n      <Badge color='warning' pill className='badge-glow'>\r\n        Warning\r\n      </Badge>\r\n      <Badge color='info' pill className='badge-glow'>\r\n        Info\r\n      </Badge>\r\n      <Badge color='dark' pill className='badge-glow'>\r\n        Dark\r\n      </Badge>\r\n    </div>\r\n  )\r\n}\r\nexport default BadgePillGlow\r\n","// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillBlock = () => {\r\n  return (\r\n    <Badge pill color='danger' className='d-block'>\r\n      <span>Block Badge Pill</span>\r\n    </Badge>\r\n  )\r\n}\r\nexport default BadgePillBlock\r\n","// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\n// ** Icons Imports\r\nimport { Link } from 'react-feather'\r\n\r\nconst BadgePillLink = () => {\r\n  return (\r\n    <Badge color='primary' pill href='#'>\r\n      <Link size={12} />\r\n      <span className='align-middle ms-50'>Link Badge Pill</span>\r\n    </Badge>\r\n  )\r\n}\r\nexport default BadgePillLink\r\n","// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillLight = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Badge color='light-primary' pill>\r\n        Primary\r\n      </Badge>\r\n      <Badge color='light-secondary' pill>\r\n        Secondary\r\n      </Badge>\r\n      <Badge color='light-success' pill>\r\n        Success\r\n      </Badge>\r\n      <Badge color='light-danger' pill>\r\n        Danger\r\n      </Badge>\r\n      <Badge color='light-warning' pill>\r\n        Warning\r\n      </Badge>\r\n      <Badge color='light-info' pill>\r\n        Info\r\n      </Badge>\r\n    </div>\r\n  )\r\n}\r\nexport default BadgePillLight\r\n","// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\n// ** Icons Imports\r\nimport { Bell } from 'react-feather'\r\n\r\nconst BadgePillNotification = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='position-relative'>\r\n        <Badge pill color='primary' className='badge-up'>\r\n          4\r\n        </Badge>\r\n        <Bell className='text-primary' size={22} />\r\n      </div>\r\n      <div className='position-relative'>\r\n        <Badge pill color='danger' className='badge-up'>\r\n          5\r\n        </Badge>\r\n        <Bell className='text-danger' size={22} />\r\n      </div>\r\n      <div className='position-relative'>\r\n        <Badge pill color='info' className='badge-up'>\r\n          6\r\n        </Badge>\r\n        <Bell className='text-info' size={22} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BadgePillNotification\r\n","// ** Reactstrap Imports\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillContextual = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <Badge color='primary' pill>\r\n        Primary\r\n      </Badge>\r\n      <Badge color='secondary' pill>\r\n        Secondary\r\n      </Badge>\r\n      <Badge color='success' pill>\r\n        Success\r\n      </Badge>\r\n      <Badge color='danger' pill>\r\n        Danger\r\n      </Badge>\r\n      <Badge color='warning' pill>\r\n        Warning\r\n      </Badge>\r\n      <Badge color='info' pill>\r\n        Info\r\n      </Badge>\r\n      <Badge color='dark' pill>\r\n        Dark\r\n      </Badge>\r\n    </div>\r\n  )\r\n}\r\nexport default BadgePillContextual\r\n","export const badgePillLight = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillLight = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Badge color='light-primary' pill>\r\n        Primary\r\n      </Badge>\r\n      <Badge color='light-secondary' pill>\r\n        Secondary\r\n      </Badge>\r\n      <Badge color='light-success' pill>\r\n        Success\r\n      </Badge>\r\n      <Badge color='light-danger' pill>\r\n      Danger\r\n      </Badge>\r\n      <Badge color='light-warning' pill>\r\n        Warning\r\n      </Badge>\r\n      <Badge color='light-info' pill>\r\n        Info\r\n      </Badge>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default BadgePillLight\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const badgePillGlow = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillGlow = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Badge color='primary' pill className='badge-glow'>\r\n        Primary\r\n      </Badge>\r\n      <Badge color='secondary' pill className='badge-glow'>\r\n        Secondary\r\n      </Badge>\r\n      <Badge color='success' pill className='badge-glow'>\r\n        Success\r\n      </Badge>\r\n      <Badge color='danger' pill className='badge-glow'>\r\n        Danger\r\n      </Badge>\r\n      <Badge color='warning' pill className='badge-glow'>\r\n        Warning\r\n      </Badge>\r\n      <Badge color='info' pill className='badge-glow'>\r\n        Info\r\n      </Badge>\r\n      <Badge color='dark' pill className='badge-glow mb-1'>\r\n        Dark\r\n      </Badge>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default BadgePillGlow\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const badgePillContextual = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillContextual = () => {\r\n  return (\r\n    <React.Fragment>\r\n      <Badge color='primary' pill>\r\n        Primary\r\n      </Badge>\r\n      <Badge color='secondary' pill>\r\n        Secondary\r\n      </Badge>\r\n      <Badge color='success' pill>\r\n        Success\r\n      </Badge>\r\n      <Badge color='danger' pill>\r\n        Danger\r\n      </Badge>\r\n      <Badge color='warning' pill>\r\n        Warning\r\n      </Badge>\r\n      <Badge color='info' pill>\r\n        Info\r\n      </Badge>\r\n      <Badge color='dark' pill>\r\n        Dark\r\n      </Badge>\r\n    </React.Fragment>\r\n  )\r\n}\r\nexport default BadgePillContextual\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const badgePillNotification = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Badge } from 'reactstrap'\r\nimport { Bell } from 'react-feather'\r\n\r\nconst BadgePillNotification = () => {\r\n  return (\r\n    <div className='demo-inline-spacing'>\r\n      <div className='position-relative'>\r\n        <Badge pill color='primary' className='badge-up'>\r\n          4\r\n        </Badge>\r\n        <Bell className='text-primary' size={22} />\r\n      </div>\r\n      <div className='position-relative'>\r\n        <Badge pill color='danger' className='badge-up'>\r\n          5\r\n        </Badge>\r\n        <Bell className='text-danger' size={22} />\r\n      </div>\r\n      <div className='position-relative'>\r\n        <Badge pill color='info' className='badge-up'>\r\n          6\r\n        </Badge>\r\n        <Bell className='text-info' size={22} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BadgePillNotification\r\n\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const badgePillLink = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Badge } from 'reactstrap'\r\nimport { Link } from 'react-feather'\r\n\r\nconst BadgePillLink = () => {\r\n  return (\r\n    <Badge color='primary' pill href='#'>\r\n      <Link size={12} />\r\n      <span className='align-middle ms-50'>Link Badge Pill</span>\r\n    </Badge>\r\n  )\r\n}\r\nexport default BadgePillLink\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n\r\nexport const badgePillBlock = (\r\n  <pre>\r\n    <code className='language-jsx'>\r\n      {`\r\n\r\nimport { Badge } from 'reactstrap'\r\n\r\nconst BadgePillBlock = () => {\r\n  return (\r\n    <Badge pill color='primary' className='d-block'>\r\n      <span>Block Badge Pill</span>\r\n    </Badge>\r\n  )\r\n}\r\nexport default BadgePillBlock\r\n`}\r\n    </code>\r\n  </pre>\r\n)\r\n","// ** React Imports\r\nimport { Fragment, useEffect } from 'react'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, CardText } from 'reactstrap'\r\n\r\n// ** Third Party Components\r\nimport Prism from 'prismjs'\r\n\r\n// ** Custom Components\r\nimport Card from '@components/card-snippet'\r\nimport BreadCrumbs from '@components/breadcrumbs'\r\n\r\n// ** Demo Components\r\nimport BadgeGlow from './BadgePillGlow'\r\nimport BadgePillBlock from './BadgeBlock'\r\nimport BadgePillLink from './BadgePillLink'\r\nimport BadgePillLight from './BadgePillLight'\r\nimport BadgeNotification from './BadgeNotification'\r\nimport BadgePillContextual from './BadgePillContextual'\r\n\r\n// ** Source Code\r\nimport {\r\n  badgePillGlow,\r\n  badgePillLink,\r\n  badgePillBlock,\r\n  badgePillLight,\r\n  badgePillContextual,\r\n  badgePillNotification\r\n} from './BadgePillSourceCode'\r\n\r\nconst BadgePill = () => {\r\n  useEffect(() => {\r\n    Prism.highlightAll()\r\n  }, [])\r\n  return (\r\n    <Fragment>\r\n      <BreadCrumbs title='Pill Badges' data={[{ title: 'Components' }, { title: 'Pill Badges' }]} />\r\n      <Row>\r\n        <Col sm='12'>\r\n          <Card title='Contextual' code={badgePillContextual}>\r\n            <CardText className='mb-0'>\r\n              Use prop <code>pill</code> with <code>Badge</code> tag to create badge pill.\r\n            </CardText>\r\n            <BadgePillContextual />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Glow' code={badgePillGlow}>\r\n            <CardText className='mb-0'>\r\n              Use class <code>.badge-glow</code> with <code>Badge</code> tag to add glow effect to your badge.\r\n            </CardText>\r\n            <BadgeGlow />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Light' code={badgePillLight}>\r\n            <CardText className='mb-0'>\r\n              Use prop <code>pill</code> and <code>color=\"light-COLOR_NAME\"</code> with <code>Badge</code> tag to create\r\n              a light badge pill.\r\n            </CardText>\r\n            <BadgePillLight />\r\n          </Card>\r\n        </Col>\r\n        <Col sm='12'>\r\n          <Card title='Notifications' code={badgePillNotification}>\r\n            <CardText className='mb-0'>\r\n              Use <code>.badge-up</code> to set pill badge to higher than other text. So that it can work with\r\n              notifications also.\r\n            </CardText>\r\n            <BadgeNotification />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n      <Row className='match-height'>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Link' code={badgePillLink}>\r\n            <CardText>\r\n              Use <code>href=\"#\"</code> prop to use badge as a link.\r\n            </CardText>\r\n            <BadgePillLink />\r\n          </Card>\r\n        </Col>\r\n        <Col md='6' sm='12'>\r\n          <Card title='Block' code={badgePillBlock}>\r\n            <CardText>\r\n              Use <code>.d-block</code> class to make badge display as block.\r\n            </CardText>\r\n            <BadgePillBlock />\r\n          </Card>\r\n        </Col>\r\n      </Row>\r\n    </Fragment>\r\n  )\r\n}\r\nexport default BadgePill\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\n// ** Third Party Components\r\nimport Proptypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport {\r\n  Breadcrumb,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  BreadcrumbItem,\r\n  DropdownToggle,\r\n  UncontrolledButtonDropdown\r\n} from 'reactstrap'\r\n\r\nconst BreadCrumbs = props => {\r\n  // ** Props\r\n  const { data, title } = props\r\n\r\n  const renderBreadCrumbs = () => {\r\n    return data.map((item, index) => {\r\n      const Wrapper = item.link ? Link : Fragment\r\n      const isLastItem = data.length - 1 === index\r\n      return (\r\n        <BreadcrumbItem\r\n          tag='li'\r\n          key={index}\r\n          active={!isLastItem}\r\n          className={classnames({ 'text-primary': !isLastItem })}\r\n        >\r\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\r\n        </BreadcrumbItem>\r\n      )\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className='content-header row'>\r\n      <div className='content-header-left col-md-9 col-12 mb-2'>\r\n        <div className='row breadcrumbs-top'>\r\n          <div className='col-12'>\r\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\r\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\r\n              <Breadcrumb>\r\n                <BreadcrumbItem tag='li'>\r\n                  <Link to='/'>Home</Link>\r\n                </BreadcrumbItem>\r\n                {renderBreadCrumbs()}\r\n              </Breadcrumb>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\r\n        <div className='breadcrumb-right dropdown'>\r\n          <UncontrolledButtonDropdown>\r\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\r\n              <Grid size={14} />\r\n            </DropdownToggle>\r\n            <DropdownMenu tag='ul' end>\r\n              <DropdownItem tag={Link} to='/apps/todo'>\r\n                <CheckSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Todo</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/chat'>\r\n                <MessageSquare className='me-1' size={14} />\r\n                <span className='align-middle'>Chat</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/email'>\r\n                <Mail className='me-1' size={14} />\r\n                <span className='align-middle'>Email</span>\r\n              </DropdownItem>\r\n              <DropdownItem tag={Link} to='/apps/calendar'>\r\n                <Calendar className='me-1' size={14} />\r\n                <span className='align-middle'>Calendar</span>\r\n              </DropdownItem>\r\n            </DropdownMenu>\r\n          </UncontrolledButtonDropdown>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\nexport default BreadCrumbs\r\n\r\n// ** PropTypes\r\nBreadCrumbs.propTypes = {\r\n  title: Proptypes.string.isRequired,\r\n  data: Proptypes.arrayOf(\r\n    Proptypes.shape({\r\n      link: Proptypes.string,\r\n      title: Proptypes.string.isRequired\r\n    })\r\n  )\r\n}\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport { Code } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\r\n\r\nconst CardSnippet = props => {\r\n  // ** Props\r\n  const { title, children, noBody, code, iconCode } = props\r\n\r\n  // ** State\r\n  const [isOpen, setIsOpen] = useState(false)\r\n\r\n  // ** If user passes custom icon then render that else render default icon\r\n  const IconCode = iconCode ? iconCode : <Code size={15} />\r\n\r\n  // ** To toggle collapse\r\n  const toggle = () => setIsOpen(!isOpen)\r\n\r\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\r\n  const Wrapper = noBody ? Fragment : CardBody\r\n\r\n  return (\r\n    <Card className='card-snippet'>\r\n      <CardHeader>\r\n        <CardTitle tag='h4'>{title}</CardTitle>\r\n        <div className='views cursor-pointer' onClick={toggle}>\r\n          {IconCode}\r\n        </div>\r\n      </CardHeader>\r\n      <Wrapper>{children}</Wrapper>\r\n      <Collapse isOpen={isOpen}>\r\n        <CardBody>{code}</CardBody>\r\n      </Collapse>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CardSnippet\r\n\r\n// ** PropTypes\r\nCardSnippet.propTypes = {\r\n  code: PropTypes.node,\r\n  noBody: PropTypes.bool,\r\n  children: PropTypes.any,\r\n  iconCode: PropTypes.node,\r\n  className: PropTypes.string,\r\n  title: PropTypes.string.isRequired\r\n}\r\n"],"sourceRoot":""}