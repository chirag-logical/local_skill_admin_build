{"version":3,"sources":["views/apps/calendar/Calendar.js","views/apps/calendar/SidebarLeft.js","views/apps/calendar/AddEventSidebar.js","views/apps/calendar/index.js","assets/images/pages/calendar-illustration.png"],"names":["Calendar","props","calendarRef","useRef","store","isRtl","dispatch","calendarsColor","calendarApi","setCalendarApi","handleAddEventSidebar","blankEvent","toggleSidebar","selectEvent","updateEvent","useEffect","current","getApi","calendarOptions","events","length","plugins","interactionPlugin","dayGridPlugin","timeGridPlugin","listPlugin","initialView","headerToolbar","start","end","editable","eventResizableFromStart","dragScroll","dayMaxEvents","navLinks","eventClassNames","calendarEvent","event","colorName","_def","extendedProps","calendar","eventClick","clickedEvent","customButtons","sidebarToggle","text","className","click","dateClick","info","ev","date","eventDrop","droppedEvent","toast","success","eventResize","resizedEvent","ref","direction","memo","filters","label","color","SidebarLeft","updateFilter","updateAllFilters","block","onClick","id","type","checked","selectedCalendars","onChange","e","target","for","map","filter","classnames","includes","src","illustration","alt","AddEventSidebar","open","addEvent","removeEvent","refetchEvents","selectedEvent","useForm","defaultValues","title","control","setError","setValue","getValues","handleSubmit","errors","formState","useState","url","setUrl","desc","setDesc","guests","setGuests","allDay","setAllDay","location","setLocation","Date","endPicker","setEndPicker","startPicker","setStartPicker","value","calendarLabel","setCalendarLabel","guestsOptions","avatar","img1","img2","img3","img4","img5","img6","handleUpdateEvent","eventToUpdate","display","undefined","description","updatedEventData","propsToUpdate","extendedPropsToUpdate","existingEvent","getEventById","index","propName","setProp","setDates","setExtendedProp","updateEventInCalendar","handleDeleteEvent","eventId","remove","error","EventActions","isObjEmpty","outline","CloseBtn","size","isOpen","toggle","onOpened","onClosed","contentClassName","modalClassName","close","tag","options","wheelPropagation","onSubmit","data","obj","handleAddEvent","name","render","field","placeholder","invalid","theme","selectThemeColors","classNamePrefix","isClearable","components","Option","required","enableTime","dateFormat","isMulti","img","rows","Business","Holiday","Personal","Family","ETC","CalendarComponent","useDispatch","useSelector","state","addSidebarOpen","setAddSidebarOpen","leftSidebarOpen","setLeftSidebarOpen","useRTL","val","fetchEvents","show"],"mappings":"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","file":"static/js/61.4eb5d481.chunk.js","sourcesContent":["// ** React Import\r\nimport { useEffect, useRef, memo, Fragment } from 'react'\r\n\r\n// ** Full Calendar & it's Plugins\r\nimport FullCalendar from '@fullcalendar/react'\r\nimport listPlugin from '@fullcalendar/list'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport timeGridPlugin from '@fullcalendar/timegrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\n\r\n// ** Third Party Components\r\nimport toast from 'react-hot-toast'\r\nimport { Menu } from 'react-feather'\r\nimport { Card, CardBody } from 'reactstrap'\r\n\r\nconst Calendar = props => {\r\n  // ** Refs\r\n  const calendarRef = useRef(null)\r\n\r\n  // ** Props\r\n  const {\r\n    store,\r\n    isRtl,\r\n    dispatch,\r\n    calendarsColor,\r\n    calendarApi,\r\n    setCalendarApi,\r\n    handleAddEventSidebar,\r\n    blankEvent,\r\n    toggleSidebar,\r\n    selectEvent,\r\n    updateEvent\r\n  } = props\r\n\r\n  // ** UseEffect checks for CalendarAPI Update\r\n  useEffect(() => {\r\n    if (calendarApi === null) {\r\n      setCalendarApi(calendarRef.current.getApi())\r\n    }\r\n  }, [calendarApi])\r\n\r\n  // ** calendarOptions(Props)\r\n  const calendarOptions = {\r\n    events: store.events.length ? store.events : [],\r\n    plugins: [interactionPlugin, dayGridPlugin, timeGridPlugin, listPlugin],\r\n    initialView: 'dayGridMonth',\r\n    headerToolbar: {\r\n      start: 'sidebarToggle, prev,next, title',\r\n      end: 'dayGridMonth,timeGridWeek,timeGridDay,listMonth'\r\n    },\r\n    /*\r\n      Enable dragging and resizing event\r\n      ? Docs: https://fullcalendar.io/docs/editable\r\n    */\r\n    editable: true,\r\n\r\n    /*\r\n      Enable resizing event from start\r\n      ? Docs: https://fullcalendar.io/docs/eventResizableFromStart\r\n    */\r\n    eventResizableFromStart: true,\r\n\r\n    /*\r\n      Automatically scroll the scroll-containers during event drag-and-drop and date selecting\r\n      ? Docs: https://fullcalendar.io/docs/dragScroll\r\n    */\r\n    dragScroll: true,\r\n\r\n    /*\r\n      Max number of events within a given day\r\n      ? Docs: https://fullcalendar.io/docs/dayMaxEvents\r\n    */\r\n    dayMaxEvents: 2,\r\n\r\n    /*\r\n      Determines if day names and week names are clickable\r\n      ? Docs: https://fullcalendar.io/docs/navLinks\r\n    */\r\n    navLinks: true,\r\n\r\n    eventClassNames({ event: calendarEvent }) {\r\n      // eslint-disable-next-line no-underscore-dangle\r\n      const colorName = calendarsColor[calendarEvent._def.extendedProps.calendar]\r\n\r\n      return [\r\n        // Background Color\r\n        `bg-light-${colorName}`\r\n      ]\r\n    },\r\n\r\n    eventClick({ event: clickedEvent }) {\r\n      dispatch(selectEvent(clickedEvent))\r\n      handleAddEventSidebar()\r\n\r\n      // * Only grab required field otherwise it goes in infinity loop\r\n      // ! Always grab all fields rendered by form (even if it get `undefined`) otherwise due to Vue3/Composition API you might get: \"object is not extensible\"\r\n      // event.value = grabEventDataFromEventApi(clickedEvent)\r\n\r\n      // eslint-disable-next-line no-use-before-define\r\n      // isAddNewEventSidebarActive.value = true\r\n    },\r\n\r\n    customButtons: {\r\n      sidebarToggle: {\r\n        text: <Menu className='d-xl-none d-block' />,\r\n        click() {\r\n          toggleSidebar(true)\r\n        }\r\n      }\r\n    },\r\n\r\n    dateClick(info) {\r\n      const ev = blankEvent\r\n      ev.start = info.date\r\n      ev.end = info.date\r\n      dispatch(selectEvent(ev))\r\n      handleAddEventSidebar()\r\n    },\r\n\r\n    /*\r\n      Handle event drop (Also include dragged event)\r\n      ? Docs: https://fullcalendar.io/docs/eventDrop\r\n      ? We can use `eventDragStop` but it doesn't return updated event so we have to use `eventDrop` which returns updated event\r\n    */\r\n    eventDrop({ event: droppedEvent }) {\r\n      dispatch(updateEvent(droppedEvent))\r\n      toast.success('Event Updated')\r\n    },\r\n\r\n    /*\r\n      Handle event resize\r\n      ? Docs: https://fullcalendar.io/docs/eventResize\r\n    */\r\n    eventResize({ event: resizedEvent }) {\r\n      dispatch(updateEvent(resizedEvent))\r\n      toast.success('Event Updated')\r\n    },\r\n\r\n    ref: calendarRef,\r\n\r\n    // Get direction from app state (store)\r\n    direction: isRtl ? 'rtl' : 'ltr'\r\n  }\r\n\r\n  return (\r\n    <Card className='shadow-none border-0 mb-0 rounded-0'>\r\n      <CardBody className='pb-0'>\r\n        <FullCalendar {...calendarOptions} />{' '}\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default memo(Calendar)\r\n","// ** React Imports\r\nimport { Fragment } from 'react'\r\n\r\n// ** Custom Components\r\nimport classnames from 'classnames'\r\n\r\n// ** Reactstrap Imports\r\nimport { CardBody, Button, Input, Label } from 'reactstrap'\r\n\r\n// ** illustration import\r\nimport illustration from '@src/assets/images/pages/calendar-illustration.png'\r\n\r\n// ** Filters Checkbox Array\r\nconst filters = [\r\n  { label: 'Personal', color: 'danger', className: 'form-check-danger mb-1' },\r\n  { label: 'Business', color: 'primary', className: 'form-check-primary mb-1' },\r\n  { label: 'Family', color: 'warning', className: 'form-check-warning mb-1' },\r\n  { label: 'Holiday', color: 'success', className: 'form-check-success mb-1' },\r\n  { label: 'ETC', color: 'info', className: 'form-check-info' }\r\n]\r\n\r\nconst SidebarLeft = props => {\r\n  // ** Props\r\n  const { handleAddEventSidebar, toggleSidebar, updateFilter, updateAllFilters, store, dispatch } = props\r\n\r\n  // ** Function to handle Add Event Click\r\n  const handleAddEventClick = () => {\r\n    toggleSidebar(false)\r\n    handleAddEventSidebar()\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='sidebar-wrapper'>\r\n        <CardBody className='card-body d-flex justify-content-center my-sm-0 mb-3'>\r\n          <Button color='primary' block onClick={handleAddEventClick}>\r\n            <span className='align-middle'>Add Event</span>\r\n          </Button>\r\n        </CardBody>\r\n        <CardBody>\r\n          <h5 className='section-label mb-1'>\r\n            <span className='align-middle'>Filter</span>\r\n          </h5>\r\n          <div className='form-check mb-1'>\r\n            <Input\r\n              id='view-all'\r\n              type='checkbox'\r\n              label='View All'\r\n              className='select-all'\r\n              checked={store.selectedCalendars.length === filters.length}\r\n              onChange={e => dispatch(updateAllFilters(e.target.checked))}\r\n            />\r\n            <Label className='form-check-label' for='view-all'>\r\n              View All\r\n            </Label>\r\n          </div>\r\n          <div className='calendar-events-filter'>\r\n            {filters.length &&\r\n              filters.map(filter => {\r\n                return (\r\n                  <div\r\n                    key={`${filter.label}-key`}\r\n                    className={classnames('form-check', {\r\n                      [filter.className]: filter.className\r\n                    })}\r\n                  >\r\n                    <Input\r\n                      type='checkbox'\r\n                      key={filter.label}\r\n                      label={filter.label}\r\n                      className='input-filter'\r\n                      id={`${filter.label}-event`}\r\n                      checked={store.selectedCalendars.includes(filter.label)}\r\n                      onChange={() => {\r\n                        dispatch(updateFilter(filter.label))\r\n                      }}\r\n                    />\r\n                    <Label className='form-check-label' for={`${filter.label}-event`}>\r\n                      {filter.label}\r\n                    </Label>\r\n                  </div>\r\n                )\r\n              })}\r\n          </div>\r\n        </CardBody>\r\n      </div>\r\n      <div className='mt-auto'>\r\n        <img className='img-fluid' src={illustration} alt='illustration' />\r\n      </div>\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default SidebarLeft\r\n","// ** React Imports\r\nimport { Fragment, useState } from 'react'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\n\r\n// ** Third Party Components\r\nimport { X } from 'react-feather'\r\nimport toast from 'react-hot-toast'\r\nimport Flatpickr from 'react-flatpickr'\r\nimport Select, { components } from 'react-select' // eslint-disable-line\r\nimport PerfectScrollbar from 'react-perfect-scrollbar'\r\nimport { useForm, Controller } from 'react-hook-form'\r\n\r\n// ** Reactstrap Imports\r\nimport { Button, Modal, ModalHeader, ModalBody, Label, Input, Form } from 'reactstrap'\r\n\r\n// ** Utils\r\nimport { selectThemeColors, isObjEmpty } from '@utils'\r\n\r\n// ** Avatar Images\r\nimport img1 from '@src/assets/images/avatars/1-small.png'\r\nimport img2 from '@src/assets/images/avatars/3-small.png'\r\nimport img3 from '@src/assets/images/avatars/5-small.png'\r\nimport img4 from '@src/assets/images/avatars/7-small.png'\r\nimport img5 from '@src/assets/images/avatars/9-small.png'\r\nimport img6 from '@src/assets/images/avatars/11-small.png'\r\n\r\n// ** Styles Imports\r\nimport '@styles/react/libs/react-select/_react-select.scss'\r\nimport '@styles/react/libs/flatpickr/flatpickr.scss'\r\n\r\nconst AddEventSidebar = props => {\r\n  // ** Props\r\n  const {\r\n    open,\r\n    store,\r\n    dispatch,\r\n    addEvent,\r\n    calendarApi,\r\n    selectEvent,\r\n    updateEvent,\r\n    removeEvent,\r\n    refetchEvents,\r\n    calendarsColor,\r\n    handleAddEventSidebar\r\n  } = props\r\n\r\n  // ** Vars & Hooks\r\n  const selectedEvent = store.selectedEvent,\r\n    {\r\n      control,\r\n      setError,\r\n      setValue,\r\n      getValues,\r\n      handleSubmit,\r\n      formState: { errors }\r\n    } = useForm({\r\n      defaultValues: { title: '' }\r\n    })\r\n\r\n  // ** States\r\n  const [url, setUrl] = useState('')\r\n  const [desc, setDesc] = useState('')\r\n  const [guests, setGuests] = useState({})\r\n  const [allDay, setAllDay] = useState(false)\r\n  const [location, setLocation] = useState('')\r\n  const [endPicker, setEndPicker] = useState(new Date())\r\n  const [startPicker, setStartPicker] = useState(new Date())\r\n  const [calendarLabel, setCalendarLabel] = useState([{ value: 'Business', label: 'Business', color: 'primary' }])\r\n\r\n  // ** Select Options\r\n  const options = [\r\n    { value: 'Business', label: 'Business', color: 'primary' },\r\n    { value: 'Personal', label: 'Personal', color: 'danger' },\r\n    { value: 'Family', label: 'Family', color: 'warning' },\r\n    { value: 'Holiday', label: 'Holiday', color: 'success' },\r\n    { value: 'ETC', label: 'ETC', color: 'info' }\r\n  ]\r\n\r\n  const guestsOptions = [\r\n    { value: 'Donna Frank', label: 'Donna Frank', avatar: img1 },\r\n    { value: 'Jane Foster', label: 'Jane Foster', avatar: img2 },\r\n    { value: 'Gabrielle Robertson', label: 'Gabrielle Robertson', avatar: img3 },\r\n    { value: 'Lori Spears', label: 'Lori Spears', avatar: img4 },\r\n    { value: 'Sandy Vega', label: 'Sandy Vega', avatar: img5 },\r\n    { value: 'Cheryl May', label: 'Cheryl May', avatar: img6 }\r\n  ]\r\n\r\n  // ** Custom select components\r\n  const OptionComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <span className={`bullet bullet-${data.color} bullet-sm me-50`}></span>\r\n        {data.label}\r\n      </components.Option>\r\n    )\r\n  }\r\n\r\n  const GuestsComponent = ({ data, ...props }) => {\r\n    return (\r\n      <components.Option {...props}>\r\n        <div className='d-flex flex-wrap align-items-center'>\r\n          <Avatar className='my-0 me-1' size='sm' img={data.avatar} />\r\n          <div>{data.label}</div>\r\n        </div>\r\n      </components.Option>\r\n    )\r\n  }\r\n\r\n  // ** Adds New Event\r\n  const handleAddEvent = () => {\r\n    const obj = {\r\n      title: getValues('title'),\r\n      start: startPicker,\r\n      end: endPicker,\r\n      allDay,\r\n      display: 'block',\r\n      extendedProps: {\r\n        calendar: calendarLabel[0].label,\r\n        url: url.length ? url : undefined,\r\n        guests: guests.length ? guests : undefined,\r\n        location: location.length ? location : undefined,\r\n        desc: desc.length ? desc : undefined\r\n      }\r\n    }\r\n    dispatch(addEvent(obj))\r\n    refetchEvents()\r\n    handleAddEventSidebar()\r\n    toast.success('Event Added')\r\n  }\r\n\r\n  // ** Reset Input Values on Close\r\n  const handleResetInputValues = () => {\r\n    dispatch(selectEvent({}))\r\n    setValue('title', '')\r\n    setAllDay(false)\r\n    setUrl('')\r\n    setLocation('')\r\n    setDesc('')\r\n    setGuests({})\r\n    setCalendarLabel([{ value: 'Business', label: 'Business', color: 'primary' }])\r\n    setStartPicker(new Date())\r\n    setEndPicker(new Date())\r\n  }\r\n\r\n  // ** Set sidebar fields\r\n  const handleSelectedEvent = () => {\r\n    if (!isObjEmpty(selectedEvent)) {\r\n      const calendar = selectedEvent.extendedProps.calendar\r\n\r\n      const resolveLabel = () => {\r\n        if (calendar.length) {\r\n          return { label: calendar, value: calendar, color: calendarsColor[calendar] }\r\n        } else {\r\n          return { value: 'Business', label: 'Business', color: 'primary' }\r\n        }\r\n      }\r\n      setValue('title', selectedEvent.title || getValues('title'))\r\n      setAllDay(selectedEvent.allDay || allDay)\r\n      setUrl(selectedEvent.url || url)\r\n      setLocation(selectedEvent.extendedProps.location || location)\r\n      setDesc(selectedEvent.extendedProps.description || desc)\r\n      setGuests(selectedEvent.extendedProps.guests || guests)\r\n      setStartPicker(new Date(selectedEvent.start))\r\n      setEndPicker(selectedEvent.allDay ? new Date(selectedEvent.start) : new Date(selectedEvent.end))\r\n      setCalendarLabel([resolveLabel()])\r\n    }\r\n  }\r\n\r\n  // ** (UI) updateEventInCalendar\r\n  const updateEventInCalendar = (updatedEventData, propsToUpdate, extendedPropsToUpdate) => {\r\n    const existingEvent = calendarApi.getEventById(updatedEventData.id)\r\n\r\n    // ** Set event properties except date related\r\n    // ? Docs: https://fullcalendar.io/docs/Event-setProp\r\n    // ** dateRelatedProps => ['start', 'end', 'allDay']\r\n    // ** eslint-disable-next-line no-plusplus\r\n    for (let index = 0; index < propsToUpdate.length; index++) {\r\n      const propName = propsToUpdate[index]\r\n      existingEvent.setProp(propName, updatedEventData[propName])\r\n    }\r\n\r\n    // ** Set date related props\r\n    // ? Docs: https://fullcalendar.io/docs/Event-setDates\r\n    existingEvent.setDates(new Date(updatedEventData.start), new Date(updatedEventData.end), {\r\n      allDay: updatedEventData.allDay\r\n    })\r\n\r\n    // ** Set event's extendedProps\r\n    // ? Docs: https://fullcalendar.io/docs/Event-setExtendedProp\r\n    // ** eslint-disable-next-line no-plusplus\r\n    for (let index = 0; index < extendedPropsToUpdate.length; index++) {\r\n      const propName = extendedPropsToUpdate[index]\r\n      existingEvent.setExtendedProp(propName, updatedEventData.extendedProps[propName])\r\n    }\r\n  }\r\n\r\n  // ** Updates Event in Store\r\n  const handleUpdateEvent = () => {\r\n    if (getValues('title').length) {\r\n      const eventToUpdate = {\r\n        id: selectedEvent.id,\r\n        title: getValues('title'),\r\n        allDay,\r\n        start: startPicker,\r\n        end: endPicker,\r\n        url,\r\n        display: allDay === false ? 'block' : undefined,\r\n        extendedProps: {\r\n          location,\r\n          description: desc,\r\n          guests,\r\n          calendar: calendarLabel[0].label\r\n        }\r\n      }\r\n\r\n      const propsToUpdate = ['id', 'title', 'url']\r\n      const extendedPropsToUpdate = ['calendar', 'guests', 'location', 'description']\r\n      dispatch(updateEvent(eventToUpdate))\r\n      updateEventInCalendar(eventToUpdate, propsToUpdate, extendedPropsToUpdate)\r\n\r\n      handleAddEventSidebar()\r\n      toast.success('Event Updated')\r\n    } else {\r\n      setError('title', {\r\n        type: 'manual'\r\n      })\r\n    }\r\n  }\r\n\r\n  // ** (UI) removeEventInCalendar\r\n  const removeEventInCalendar = eventId => {\r\n    calendarApi.getEventById(eventId).remove()\r\n  }\r\n\r\n  const handleDeleteEvent = () => {\r\n    dispatch(removeEvent(selectedEvent.id))\r\n    removeEventInCalendar(selectedEvent.id)\r\n    handleAddEventSidebar()\r\n    toast.error('Event Removed')\r\n  }\r\n\r\n  // ** Event Action buttons\r\n  const EventActions = () => {\r\n    if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\r\n      return (\r\n        <Fragment>\r\n          <Button className='me-1' type='submit' color='primary'>\r\n            Add\r\n          </Button>\r\n          <Button color='secondary' type='reset' onClick={handleAddEventSidebar} outline>\r\n            Cancel\r\n          </Button>\r\n        </Fragment>\r\n      )\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <Button className='me-1' color='primary' onClick={handleUpdateEvent}>\r\n            Update\r\n          </Button>\r\n          <Button color='danger' onClick={handleDeleteEvent} outline>\r\n            Delete\r\n          </Button>\r\n        </Fragment>\r\n      )\r\n    }\r\n  }\r\n\r\n  // ** Close BTN\r\n  const CloseBtn = <X className='cursor-pointer' size={15} onClick={handleAddEventSidebar} />\r\n\r\n  return (\r\n    <Modal\r\n      isOpen={open}\r\n      className='sidebar-lg'\r\n      toggle={handleAddEventSidebar}\r\n      onOpened={handleSelectedEvent}\r\n      onClosed={handleResetInputValues}\r\n      contentClassName='p-0 overflow-hidden'\r\n      modalClassName='modal-slide-in event-sidebar'\r\n    >\r\n      <ModalHeader className='mb-1' toggle={handleAddEventSidebar} close={CloseBtn} tag='div'>\r\n        <h5 className='modal-title'>\r\n          {selectedEvent && selectedEvent.title && selectedEvent.title.length ? 'Update' : 'Add'} Event\r\n        </h5>\r\n      </ModalHeader>\r\n      <PerfectScrollbar options={{ wheelPropagation: false }}>\r\n        <ModalBody className='flex-grow-1 pb-sm-0 pb-3'>\r\n          <Form\r\n            onSubmit={handleSubmit(data => {\r\n              if (data.title.length) {\r\n                if (isObjEmpty(errors)) {\r\n                  if (isObjEmpty(selectedEvent) || (!isObjEmpty(selectedEvent) && !selectedEvent.title.length)) {\r\n                    handleAddEvent()\r\n                  } else {\r\n                    handleUpdateEvent()\r\n                  }\r\n                  handleAddEventSidebar()\r\n                }\r\n              } else {\r\n                setError('title', {\r\n                  type: 'manual'\r\n                })\r\n              }\r\n            })}\r\n          >\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='title'>\r\n                Title <span className='text-danger'>*</span>\r\n              </Label>\r\n              <Controller\r\n                name='title'\r\n                control={control}\r\n                render={({ field }) => (\r\n                  <Input id='title' placeholder='Title' invalid={errors.title && true} {...field} />\r\n                )}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='label'>\r\n                Label\r\n              </Label>\r\n              <Select\r\n                id='label'\r\n                value={calendarLabel}\r\n                options={options}\r\n                theme={selectThemeColors}\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                isClearable={false}\r\n                onChange={data => setCalendarLabel([data])}\r\n                components={{\r\n                  Option: OptionComponent\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='startDate'>\r\n                Start Date\r\n              </Label>\r\n              <Flatpickr\r\n                required\r\n                id='startDate'\r\n                name='startDate'\r\n                className='form-control'\r\n                onChange={date => setStartPicker(date[0])}\r\n                value={startPicker}\r\n                options={{\r\n                  enableTime: allDay === false,\r\n                  dateFormat: 'Y-m-d H:i'\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='endDate'>\r\n                End Date\r\n              </Label>\r\n              <Flatpickr\r\n                required\r\n                id='endDate'\r\n                // tag={Flatpickr}\r\n                name='endDate'\r\n                className='form-control'\r\n                onChange={date => setEndPicker(date[0])}\r\n                value={endPicker}\r\n                options={{\r\n                  enableTime: allDay === false,\r\n                  dateFormat: 'Y-m-d H:i'\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='form-switch mb-1'>\r\n              <Input\r\n                id='allDay'\r\n                type='switch'\r\n                className='me-1'\r\n                checked={allDay}\r\n                name='customSwitch'\r\n                onChange={e => setAllDay(e.target.checked)}\r\n              />\r\n              <Label className='form-label' for='allDay'>\r\n                All Day\r\n              </Label>\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='eventURL'>\r\n                Event URL\r\n              </Label>\r\n              <Input\r\n                type='url'\r\n                id='eventURL'\r\n                value={url}\r\n                onChange={e => setUrl(e.target.value)}\r\n                placeholder='https://www.google.com'\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='guests'>\r\n                Guests\r\n              </Label>\r\n              <Select\r\n                isMulti\r\n                id='guests'\r\n                className='react-select'\r\n                classNamePrefix='select'\r\n                isClearable={false}\r\n                options={guestsOptions}\r\n                theme={selectThemeColors}\r\n                value={guests.length ? [...guests] : null}\r\n                onChange={data => setGuests([...data])}\r\n                components={{\r\n                  Option: GuestsComponent\r\n                }}\r\n              />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='location'>\r\n                Location\r\n              </Label>\r\n              <Input id='location' value={location} onChange={e => setLocation(e.target.value)} placeholder='Office' />\r\n            </div>\r\n\r\n            <div className='mb-1'>\r\n              <Label className='form-label' for='description'>\r\n                Description\r\n              </Label>\r\n              <Input\r\n                type='textarea'\r\n                name='text'\r\n                id='description'\r\n                rows='3'\r\n                value={desc}\r\n                onChange={e => setDesc(e.target.value)}\r\n                placeholder='Description'\r\n              />\r\n            </div>\r\n            <div className='d-flex mb-1'>\r\n              <EventActions />\r\n            </div>\r\n          </Form>\r\n        </ModalBody>\r\n      </PerfectScrollbar>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default AddEventSidebar\r\n","// ** React Imports\r\nimport { Fragment, useState, useEffect } from 'react'\r\n\r\n// ** Third Party Components\r\nimport classnames from 'classnames'\r\nimport { Row, Col } from 'reactstrap'\r\n\r\n// ** Calendar App Component Imports\r\nimport Calendar from './Calendar'\r\nimport SidebarLeft from './SidebarLeft'\r\nimport AddEventSidebar from './AddEventSidebar'\r\n\r\n// ** Custom Hooks\r\nimport { useRTL } from '@hooks/useRTL'\r\n\r\n// ** Store & Actions\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { fetchEvents, selectEvent, updateEvent, updateFilter, updateAllFilters, addEvent, removeEvent } from './store'\r\n\r\n// ** Styles\r\nimport '@styles/react/apps/app-calendar.scss'\r\n\r\n// ** CalendarColors\r\nconst calendarsColor = {\r\n  Business: 'primary',\r\n  Holiday: 'success',\r\n  Personal: 'danger',\r\n  Family: 'warning',\r\n  ETC: 'info'\r\n}\r\n\r\nconst CalendarComponent = () => {\r\n  // ** Variables\r\n  const dispatch = useDispatch()\r\n  const store = useSelector(state => state.calendar)\r\n\r\n  // ** states\r\n  const [calendarApi, setCalendarApi] = useState(null)\r\n  const [addSidebarOpen, setAddSidebarOpen] = useState(false)\r\n  const [leftSidebarOpen, setLeftSidebarOpen] = useState(false)\r\n\r\n  // ** Hooks\r\n  const [isRtl] = useRTL()\r\n\r\n  // ** AddEventSidebar Toggle Function\r\n  const handleAddEventSidebar = () => setAddSidebarOpen(!addSidebarOpen)\r\n\r\n  // ** LeftSidebar Toggle Function\r\n  const toggleSidebar = val => setLeftSidebarOpen(val)\r\n\r\n  // ** Blank Event Object\r\n  const blankEvent = {\r\n    title: '',\r\n    start: '',\r\n    end: '',\r\n    allDay: false,\r\n    url: '',\r\n    extendedProps: {\r\n      calendar: '',\r\n      guests: [],\r\n      location: '',\r\n      description: ''\r\n    }\r\n  }\r\n\r\n  // ** refetchEvents\r\n  const refetchEvents = () => {\r\n    if (calendarApi !== null) {\r\n      calendarApi.refetchEvents()\r\n    }\r\n  }\r\n\r\n  // ** Fetch Events On Mount\r\n  useEffect(() => {\r\n    dispatch(fetchEvents(store.selectedCalendars))\r\n  }, [])\r\n\r\n  return (\r\n    <Fragment>\r\n      <div className='app-calendar overflow-hidden border'>\r\n        <Row className='g-0'>\r\n          <Col\r\n            id='app-calendar-sidebar'\r\n            className={classnames('col app-calendar-sidebar flex-grow-0 overflow-hidden d-flex flex-column', {\r\n              show: leftSidebarOpen\r\n            })}\r\n          >\r\n            <SidebarLeft\r\n              store={store}\r\n              dispatch={dispatch}\r\n              updateFilter={updateFilter}\r\n              toggleSidebar={toggleSidebar}\r\n              updateAllFilters={updateAllFilters}\r\n              handleAddEventSidebar={handleAddEventSidebar}\r\n            />\r\n          </Col>\r\n          <Col className='position-relative'>\r\n            <Calendar\r\n              isRtl={isRtl}\r\n              store={store}\r\n              dispatch={dispatch}\r\n              blankEvent={blankEvent}\r\n              calendarApi={calendarApi}\r\n              selectEvent={selectEvent}\r\n              updateEvent={updateEvent}\r\n              toggleSidebar={toggleSidebar}\r\n              calendarsColor={calendarsColor}\r\n              setCalendarApi={setCalendarApi}\r\n              handleAddEventSidebar={handleAddEventSidebar}\r\n            />\r\n          </Col>\r\n          <div\r\n            className={classnames('body-content-overlay', {\r\n              show: leftSidebarOpen === true\r\n            })}\r\n            onClick={() => toggleSidebar(false)}\r\n          ></div>\r\n        </Row>\r\n      </div>\r\n      <AddEventSidebar\r\n        store={store}\r\n        dispatch={dispatch}\r\n        addEvent={addEvent}\r\n        open={addSidebarOpen}\r\n        selectEvent={selectEvent}\r\n        updateEvent={updateEvent}\r\n        removeEvent={removeEvent}\r\n        calendarApi={calendarApi}\r\n        refetchEvents={refetchEvents}\r\n        calendarsColor={calendarsColor}\r\n        handleAddEventSidebar={handleAddEventSidebar}\r\n      />\r\n    </Fragment>\r\n  )\r\n}\r\n\r\nexport default CalendarComponent\r\n","export default __webpack_public_path__ + \"static/media/calendar-illustration.42be42ce.png\";"],"sourceRoot":""}