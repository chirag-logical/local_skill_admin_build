{"version":3,"sources":["views/pages/authentication/Register.js","@core/components/input-password-toggle/index.js"],"names":["defaultValues","email","terms","username","password","Register","ability","useContext","AbilityContext","skin","useSkin","navigate","useNavigate","dispatch","useDispatch","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","className","to","onClick","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","id","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","action","onSubmit","data","tempData","Object","values","every","field","length","useJwt","register","then","res","error","property","type","message","user","accessToken","update","handleLogin","catch","err","console","log","key","for","name","render","autoFocus","placeholder","invalid","checked","value","href","block","color","size","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/93.ef547a76.chunk.js","sourcesContent":["// ** React Imports\nimport { useContext } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\nimport useJwt from '@src/auth/jwt/useJwt'\n\n// ** Store & Actions\nimport { useDispatch } from 'react-redux'\nimport { handleLogin } from '@store/authentication'\n\n// ** Third Party Components\nimport { useForm, Controller } from 'react-hook-form'\nimport { Facebook, Twitter, Mail, GitHub } from 'react-feather'\n\n// ** Context\nimport { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardTitle, CardText, Label, Button, Form, Input, FormFeedback } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\n\nconst defaultValues = {\n  email: '',\n  terms: false,\n  username: '',\n  password: ''\n}\n\nconst Register = () => {\n  // ** Hooks\n  const ability = useContext(AbilityContext)\n  const { skin } = useSkin()\n  const navigate = useNavigate()\n  const dispatch = useDispatch()\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm({ defaultValues })\n\n  const illustration = skin === 'dark' ? 'register-v2-dark.svg' : 'register-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = data => {\n    const tempData = { ...data }\n    delete tempData.terms\n    if (Object.values(tempData).every(field => field.length > 0) && data.terms === true) {\n      const { username, email, password } = data\n      useJwt\n        .register({ username, email, password })\n        .then(res => {\n          if (res.data.error) {\n            for (const property in res.data.error) {\n              if (res.data.error[property] !== null) {\n                setError(property, {\n                  type: 'manual',\n                  message: res.data.error[property]\n                })\n              }\n            }\n          } else {\n            const data = { ...res.data.user, accessToken: res.data.accessToken }\n            ability.update(res.data.user.ability)\n            dispatch(handleLogin(data))\n            navigate('/')\n          }\n        })\n        .catch(err => console.log(err))\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual',\n            message: `Please enter a valid ${key}`\n          })\n        }\n        if (key === 'terms' && data.terms === false) {\n          setError('terms', {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ms-1'>Vuexy</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Adventure starts here 🚀\n            </CardTitle>\n            <CardText className='mb-2'>Make your app management easy and fun!</CardText>\n\n            <Form action='/' className='auth-register-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-username'>\n                  Username\n                </Label>\n                <Controller\n                  id='username'\n                  name='username'\n                  control={control}\n                  render={({ field }) => (\n                    <Input autoFocus placeholder='johndoe' invalid={errors.username && true} {...field} />\n                  )}\n                />\n                {errors.username ? <FormFeedback>{errors.username.message}</FormFeedback> : null}\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='email'\n                  name='email'\n                  control={control}\n                  render={({ field }) => (\n                    <Input type='email' placeholder='john@example.com' invalid={errors.email && true} {...field} />\n                  )}\n                />\n                {errors.email ? <FormFeedback>{errors.email.message}</FormFeedback> : null}\n              </div>\n              <div className='mb-1'>\n                <Label className='form-label' for='register-password'>\n                  Password\n                </Label>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              <div className='form-check mb-1'>\n                <Controller\n                  name='terms'\n                  control={control}\n                  render={({ field }) => (\n                    <Input {...field} id='terms' type='checkbox' checked={field.value} invalid={errors.terms && true} />\n                  )}\n                />\n                <Label className='form-check-label' for='terms'>\n                  I agree to\n                  <a className='ms-25' href='/' onClick={e => e.preventDefault()}>\n                    privacy policy & terms\n                  </a>\n                </Label>\n              </div>\n              <Button type='submit' block color='primary'>\n                Sign up\n              </Button>\n            </Form>\n            <p className='text-center mt-2'>\n              <span className='me-25'>Already have an account?</span>\n              <Link to='/login'>\n                <span>Sign in instead</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div>\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Register\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}