{"version":3,"sources":["views/apps/chat/Chat.js","views/apps/chat/SidebarLeft.js","views/apps/chat/UserProfileSidebar.js","views/apps/chat/index.js"],"names":["ChatLog","props","handleUser","handleUserSidebarRight","handleSidebar","store","userSidebarLeft","userProfile","selectedUser","chatArea","useRef","dispatch","useDispatch","useState","msg","setMsg","useEffect","Object","keys","length","ReactDOM","findDOMNode","current","scrollTop","Number","MAX_SAFE_INTEGER","ChatWrapper","chat","PerfectScrollbar","className","classnames","onClick","window","innerWidth","size","imgHeight","imgWidth","img","contact","avatar","status","obj","fullName","color","end","href","e","preventDefault","ref","options","wheelPropagation","chatLog","formattedChatLog","chatMessageSenderId","senderId","undefined","msgGroup","messages","forEach","index","push","message","time","formattedChatData","map","item","onSubmit","trim","sendMsg","handleSendMsg","value","onChange","target","placeholder","for","type","id","hidden","SidebarLeft","sidebar","handleUserSidebarLeft","chats","contacts","query","setQuery","about","setAbout","active","setActive","setStatus","filteredChat","setFilteredChat","filteredContacts","setFilteredContacts","handleUserClick","selectChat","isObjEmpty","show","role","rows","defaultValue","label","checked","name","defaultChecked","searchFilterFunction","toLowerCase","includes","filteredChatsArr","filter","filteredContactssArr","formatDateToMonthShort","lastMessage","Date","unseenMsgs","pill","UserProfileSidebar","user","userSidebarRight","AppChat","useSelector","state","setUser","setSidebar","setUserSidebarRight","setUserSidebarLeft","getChatContacts","getUserProfile","Chat"],"mappings":"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","file":"static/js/72.72ef4e51.chunk.js","sourcesContent":["// ** React Imports\nimport ReactDOM from 'react-dom'\nimport { useState, useEffect, useRef } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { sendMsg } from './store'\nimport { useDispatch } from 'react-redux'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { MessageSquare, Menu, PhoneCall, Video, Search, MoreVertical, Mic, Image, Send } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Form,\n  Label,\n  Input,\n  Button,\n  InputGroup,\n  DropdownItem,\n  DropdownMenu,\n  DropdownToggle,\n  InputGroupText,\n  UncontrolledDropdown\n} from 'reactstrap'\n\nconst ChatLog = props => {\n  // ** Props & Store\n  const { handleUser, handleUserSidebarRight, handleSidebar, store, userSidebarLeft } = props\n  const { userProfile, selectedUser } = store\n\n  // ** Refs & Dispatch\n  const chatArea = useRef(null)\n  const dispatch = useDispatch()\n\n  // ** State\n  const [msg, setMsg] = useState('')\n\n  // ** Scroll to chat bottom\n  const scrollToBottom = () => {\n    const chatContainer = ReactDOM.findDOMNode(chatArea.current)\n    chatContainer.scrollTop = Number.MAX_SAFE_INTEGER\n  }\n\n  // ** If user chat is not empty scrollToBottom\n  useEffect(() => {\n    const selectedUserLen = Object.keys(selectedUser).length\n\n    if (selectedUserLen) {\n      scrollToBottom()\n    }\n  }, [selectedUser])\n\n  // ** Formats chat data based on sender\n  const formattedChatData = () => {\n    let chatLog = []\n    if (selectedUser.chat) {\n      chatLog = selectedUser.chat.chat\n    }\n\n    const formattedChatLog = []\n    let chatMessageSenderId = chatLog[0] ? chatLog[0].senderId : undefined\n    let msgGroup = {\n      senderId: chatMessageSenderId,\n      messages: []\n    }\n    chatLog.forEach((msg, index) => {\n      if (chatMessageSenderId === msg.senderId) {\n        msgGroup.messages.push({\n          msg: msg.message,\n          time: msg.time\n        })\n      } else {\n        chatMessageSenderId = msg.senderId\n        formattedChatLog.push(msgGroup)\n        msgGroup = {\n          senderId: msg.senderId,\n          messages: [\n            {\n              msg: msg.message,\n              time: msg.time\n            }\n          ]\n        }\n      }\n      if (index === chatLog.length - 1) formattedChatLog.push(msgGroup)\n    })\n    return formattedChatLog\n  }\n\n  // ** Renders user chat\n  const renderChats = () => {\n    return formattedChatData().map((item, index) => {\n      return (\n        <div\n          key={index}\n          className={classnames('chat', {\n            'chat-left': item.senderId !== 11\n          })}\n        >\n          <div className='chat-avatar'>\n            <Avatar\n              imgWidth={36}\n              imgHeight={36}\n              className='box-shadow-1 cursor-pointer'\n              img={item.senderId === 11 ? userProfile.avatar : selectedUser.contact.avatar}\n            />\n          </div>\n\n          <div className='chat-body'>\n            {item.messages.map(chat => (\n              <div key={chat.msg} className='chat-content'>\n                <p>{chat.msg}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    })\n  }\n\n  // ** Opens right sidebar & handles its data\n  const handleAvatarClick = obj => {\n    handleUserSidebarRight()\n    handleUser(obj)\n  }\n\n  // ** On mobile screen open left sidebar on Start Conversation Click\n  const handleStartConversation = () => {\n    if (!Object.keys(selectedUser).length && !userSidebarLeft && window.innerWidth < 992) {\n      handleSidebar()\n    }\n  }\n\n  // ** Sends New Msg\n  const handleSendMsg = e => {\n    e.preventDefault()\n    if (msg.trim().length) {\n      dispatch(sendMsg({ ...selectedUser, message: msg }))\n      setMsg('')\n    }\n  }\n\n  // ** ChatWrapper tag based on chat's length\n  const ChatWrapper = Object.keys(selectedUser).length && selectedUser.chat ? PerfectScrollbar : 'div'\n\n  return (\n    <div className='chat-app-window'>\n      <div className={classnames('start-chat-area', { 'd-none': Object.keys(selectedUser).length })}>\n        <div className='start-chat-icon mb-1'>\n          <MessageSquare />\n        </div>\n        <h4 className='sidebar-toggle start-chat-text' onClick={handleStartConversation}>\n          Start Conversation\n        </h4>\n      </div>\n      {Object.keys(selectedUser).length ? (\n        <div className={classnames('active-chat', { 'd-none': selectedUser === null })}>\n          <div className='chat-navbar'>\n            <header className='chat-header'>\n              <div className='d-flex align-items-center'>\n                <div className='sidebar-toggle d-block d-lg-none me-1' onClick={handleSidebar}>\n                  <Menu size={21} />\n                </div>\n                <Avatar\n                  imgHeight='36'\n                  imgWidth='36'\n                  img={selectedUser.contact.avatar}\n                  status={selectedUser.contact.status}\n                  className='avatar-border user-profile-toggle m-0 me-1'\n                  onClick={() => handleAvatarClick(selectedUser.contact)}\n                />\n                <h6 className='mb-0'>{selectedUser.contact.fullName}</h6>\n              </div>\n              <div className='d-flex align-items-center'>\n                <PhoneCall size={18} className='cursor-pointer d-sm-block d-none me-1' />\n                <Video size={18} className='cursor-pointer d-sm-block d-none me-1' />\n                <Search size={18} className='cursor-pointer d-sm-block d-none' />\n                <UncontrolledDropdown className='more-options-dropdown'>\n                  <DropdownToggle className='btn-icon' color='transparent' size='sm'>\n                    <MoreVertical size='18' />\n                  </DropdownToggle>\n                  <DropdownMenu end>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      View Contact\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Mute Notifications\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Block Contact\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Clear Chat\n                    </DropdownItem>\n                    <DropdownItem href='/' onClick={e => e.preventDefault()}>\n                      Report\n                    </DropdownItem>\n                  </DropdownMenu>\n                </UncontrolledDropdown>\n              </div>\n            </header>\n          </div>\n\n          <ChatWrapper ref={chatArea} className='user-chats' options={{ wheelPropagation: false }}>\n            {selectedUser.chat ? <div className='chats'>{renderChats()}</div> : null}\n          </ChatWrapper>\n\n          <Form className='chat-app-form' onSubmit={e => handleSendMsg(e)}>\n            <InputGroup className='input-group-merge me-1 form-send-message'>\n              <InputGroupText>\n                <Mic className='cursor-pointer' size={14} />\n              </InputGroupText>\n              <Input\n                value={msg}\n                onChange={e => setMsg(e.target.value)}\n                placeholder='Type your message or use speech to text'\n              />\n              <InputGroupText>\n                <Label className='attachment-icon mb-0' for='attach-doc'>\n                  <Image className='cursor-pointer text-secondary' size={14} />\n                  <input type='file' id='attach-doc' hidden />\n                </Label>\n              </InputGroupText>\n            </InputGroup>\n            <Button className='send' color='primary'>\n              <Send size={14} className='d-lg-none' />\n              <span className='d-none d-lg-block'>Send</span>\n            </Button>\n          </Form>\n        </div>\n      ) : null}\n    </div>\n  )\n}\n\nexport default ChatLog\n","// ** React Imports\nimport { useState, useEffect } from 'react'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Store & Actions\nimport { selectChat } from './store'\nimport { useDispatch } from 'react-redux'\n\n// ** Utils\nimport { formatDateToMonthShort, isObjEmpty } from '@utils'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\nimport { X, Search, CheckSquare, Bell, User, Trash } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { CardText, InputGroup, InputGroupText, Badge, Input, Button, Label } from 'reactstrap'\n\nconst SidebarLeft = props => {\n  // ** Props & Store\n  const { store, sidebar, handleSidebar, userSidebarLeft, handleUserSidebarLeft } = props\n  const { chats, contacts, userProfile } = store\n\n  // ** Dispatch\n  const dispatch = useDispatch()\n\n  // ** State\n  const [query, setQuery] = useState('')\n  const [about, setAbout] = useState('')\n  const [active, setActive] = useState(0)\n  const [status, setStatus] = useState('online')\n  const [filteredChat, setFilteredChat] = useState([])\n  const [filteredContacts, setFilteredContacts] = useState([])\n\n  // ** Handles User Chat Click\n  const handleUserClick = id => {\n    dispatch(selectChat(id))\n    setActive(id)\n    if (sidebar === true) {\n      handleSidebar()\n    }\n  }\n\n  useEffect(() => {\n    if (!isObjEmpty(store.selectedUser)) {\n      if (store.selectedUser.chat) {\n        setActive(store.selectedUser.chat.id)\n      } else {\n        setActive(store.selectedUser.contact.id)\n      }\n    }\n  }, [])\n\n  // ** Renders Chat\n  const renderChats = () => {\n    if (chats && chats.length) {\n      if (query.length && !filteredChat.length) {\n        return (\n          <li className='no-results show'>\n            <h6 className='mb-0'>No Chats Found</h6>\n          </li>\n        )\n      } else {\n        const arrToMap = query.length && filteredChat.length ? filteredChat : chats\n\n        return arrToMap.map(item => {\n          const time = formatDateToMonthShort(item.chat.lastMessage ? item.chat.lastMessage.time : new Date())\n\n          return (\n            <li\n              key={item.id}\n              onClick={() => handleUserClick(item.id)}\n              className={classnames({\n                active: active === item.id\n              })}\n            >\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' status={item.status} />\n              <div className='chat-info flex-grow-1'>\n                <h5 className='mb-0'>{item.fullName}</h5>\n                <CardText className='text-truncate'>\n                  {item.chat.lastMessage ? item.chat.lastMessage.message : chats[chats.length - 1].message}\n                </CardText>\n              </div>\n              <div className='chat-meta text-nowrap'>\n                <small className='float-end mb-25 chat-time ms-25'>{time}</small>\n                {item.chat.unseenMsgs >= 1 ? (\n                  <Badge className='float-end' color='danger' pill>\n                    {item.chat.unseenMsgs}\n                  </Badge>\n                ) : null}\n              </div>\n            </li>\n          )\n        })\n      }\n    } else {\n      return null\n    }\n  }\n\n  // ** Renders Contact\n  const renderContacts = () => {\n    if (contacts && contacts.length) {\n      if (query.length && !filteredContacts.length) {\n        return (\n          <li className='no-results show'>\n            <h6 className='mb-0'>No Chats Found</h6>\n          </li>\n        )\n      } else {\n        const arrToMap = query.length && filteredContacts.length ? filteredContacts : contacts\n        return arrToMap.map(item => {\n          return (\n            <li key={item.fullName} onClick={() => handleUserClick(item.id)}>\n              <Avatar img={item.avatar} imgHeight='42' imgWidth='42' />\n              <div className='chat-info flex-grow-1'>\n                <h5 className='mb-0'>{item.fullName}</h5>\n                <CardText className='text-truncate'>{item.about}</CardText>\n              </div>\n            </li>\n          )\n        })\n      }\n    } else {\n      return null\n    }\n  }\n\n  // ** Handles Filter\n  const handleFilter = e => {\n    setQuery(e.target.value)\n    const searchFilterFunction = contact => contact.fullName.toLowerCase().includes(e.target.value.toLowerCase())\n    const filteredChatsArr = chats.filter(searchFilterFunction)\n    const filteredContactssArr = contacts.filter(searchFilterFunction)\n    setFilteredChat([...filteredChatsArr])\n    setFilteredContacts([...filteredContactssArr])\n  }\n\n  const renderAboutCount = () => {\n    if (userProfile && userProfile.about && userProfile.about.length && about.length === 0) {\n      return userProfile.about.length\n    } else {\n      return about.length\n    }\n  }\n\n  return store ? (\n    <div className='sidebar-left'>\n      <div className='sidebar'>\n        <div\n          className={classnames('chat-profile-sidebar', {\n            show: userSidebarLeft\n          })}\n        >\n          <header className='chat-profile-header'>\n            <div className='close-icon' onClick={handleUserSidebarLeft}>\n              <X size={14} />\n            </div>\n            <div className='header-profile-sidebar'>\n              <Avatar className='box-shadow-1 avatar-border' img={userProfile.avatar} status={status} size='xl' />\n              <h4 className='chat-user-name'>{userProfile.fullName}</h4>\n              <span className='user-post'>{userProfile.role}</span>\n            </div>\n          </header>\n          <PerfectScrollbar className='profile-sidebar-area' options={{ wheelPropagation: false }}>\n            <h6 className='section-label mb-1'>About</h6>\n            <div className='about-user'>\n              <Input\n                rows='5'\n                type='textarea'\n                defaultValue={userProfile.about}\n                onChange={e => setAbout(e.target.value)}\n                className={classnames('char-textarea', {\n                  'text-danger': about && about.length > 120\n                })}\n              />\n              <small className='counter-value float-end'>\n                <span className='char-count'>{renderAboutCount()}</span> / 120\n              </small>\n            </div>\n            <h6 className='section-label mb-1 mt-3'>Status</h6>\n            <ul className='list-unstyled user-status'>\n              <li className='pb-1'>\n                <div className='form-check form-check-success'>\n                  <Input\n                    type='radio'\n                    label='Online'\n                    id='user-online'\n                    checked={status === 'online'}\n                    onChange={() => setStatus('online')}\n                  />\n                  <Label className='form-check-label' for='user-online'>\n                    Online\n                  </Label>\n                </div>\n              </li>\n              <li className='pb-1'>\n                <div className='form-check form-check-danger'>\n                  <Input\n                    type='radio'\n                    id='user-busy'\n                    label='Do Not Disturb'\n                    checked={status === 'busy'}\n                    onChange={() => setStatus('busy')}\n                  />\n                  <Label className='form-check-label' for='user-busy'>\n                    Busy\n                  </Label>\n                </div>\n              </li>\n              <li className='pb-1'>\n                <div className='form-check form-check-warning'>\n                  <Input\n                    type='radio'\n                    label='Away'\n                    id='user-away'\n                    checked={status === 'away'}\n                    onChange={() => setStatus('away')}\n                  />\n                  <Label className='form-check-label' for='user-away'>\n                    Away\n                  </Label>\n                </div>\n              </li>\n              <li className='pb-1'>\n                <div className='form-check form-check-secondary'>\n                  <Input\n                    type='radio'\n                    label='Offline'\n                    id='user-offline'\n                    checked={status === 'offline'}\n                    onChange={() => setStatus('offline')}\n                  />\n                  <Label className='form-check-label' for='user-offline'>\n                    Offline\n                  </Label>\n                </div>\n              </li>\n            </ul>\n            <h6 className='section-label mb-1 mt-2'>Settings</h6>\n            <ul className='list-unstyled'>\n              <li className='d-flex justify-content-between align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <CheckSquare className='me-75' size='18' />\n                  <span className='align-middle'>Two-step Verification</span>\n                </div>\n                <div className='form-switch'>\n                  <Input type='switch' id='verification' name='verification' defaultChecked />\n                </div>\n              </li>\n              <li className='d-flex justify-content-between align-items-center mb-1'>\n                <div className='d-flex align-items-center'>\n                  <Bell className='me-75' size='18' />\n                  <span className='align-middle'>Notification</span>\n                </div>\n                <div className='form-switch'>\n                  <Input type='switch' id='notifications' name='notifications' />\n                </div>\n              </li>\n              <li className='d-flex align-items-center cursor-pointer mb-1'>\n                <User className='me-75' size='18' />\n                <span className='align-middle'>Invite Friends</span>\n              </li>\n              <li className='d-flex align-items-center cursor-pointer'>\n                <Trash className='me-75' size='18' />\n                <span className='align-middle'>Delete Account</span>\n              </li>\n            </ul>\n            <div className='mt-3'>\n              <Button color='primary'>Logout</Button>\n            </div>\n          </PerfectScrollbar>\n        </div>\n        <div\n          className={classnames('sidebar-content', {\n            show: sidebar === true\n          })}\n        >\n          <div className='sidebar-close-icon' onClick={handleSidebar}>\n            <X size={14} />\n          </div>\n          <div className='chat-fixed-search'>\n            <div className='d-flex align-items-center w-100'>\n              <div className='sidebar-profile-toggle' onClick={handleUserSidebarLeft}>\n                {Object.keys(userProfile).length ? (\n                  <Avatar\n                    className='avatar-border'\n                    img={userProfile.avatar}\n                    status={status}\n                    imgHeight='42'\n                    imgWidth='42'\n                  />\n                ) : null}\n              </div>\n              <InputGroup className='input-group-merge ms-1 w-100'>\n                <InputGroupText className='round'>\n                  <Search className='text-muted' size={14} />\n                </InputGroupText>\n                <Input\n                  value={query}\n                  className='round'\n                  placeholder='Search or start a new chat'\n                  onChange={handleFilter}\n                />\n              </InputGroup>\n            </div>\n          </div>\n          <PerfectScrollbar className='chat-user-list-wrapper list-group' options={{ wheelPropagation: false }}>\n            <h4 className='chat-list-title'>Chats</h4>\n            <ul className='chat-users-list chat-list media-list'>{renderChats()}</ul>\n            <h4 className='chat-list-title'>Contacts</h4>\n            <ul className='chat-users-list contact-list media-list'>{renderContacts()}</ul>\n          </PerfectScrollbar>\n        </div>\n      </div>\n    </div>\n  ) : null\n}\n\nexport default SidebarLeft\n","// ** Custom Components\nimport Avatar from '@components/avatar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport PerfectScrollbar from 'react-perfect-scrollbar'\n\n// ** Reactstrap Imports\nimport { X, Mail, PhoneCall, Clock, Tag, Star, Image, Trash, Slash } from 'react-feather'\n\nconst UserProfileSidebar = props => {\n  // ** Props\n  const { user, handleUserSidebarRight, userSidebarRight } = props\n\n  return (\n    <div className={classnames('user-profile-sidebar', { show: userSidebarRight === true })}>\n      <header className='user-profile-header'>\n        <span className='close-icon' onClick={handleUserSidebarRight}>\n          <X size={14} />\n        </span>\n        <div className='header-profile-sidebar'>\n          <Avatar\n            className='box-shadow-1 avatar-border'\n            size='xl'\n            status={user.status}\n            img={user.avatar}\n            imgHeight='70'\n            imgWidth='70'\n          />\n          <h4 className='chat-user-name'>{user.fullName}</h4>\n          <span className='user-post'>{user.role}</span>\n        </div>\n      </header>\n      <PerfectScrollbar className='user-profile-sidebar-area' options={{ wheelPropagation: false }}>\n        <h6 className='section-label mb-1'>About</h6>\n        <p>{user.about}</p>\n        <div className='personal-info'>\n          <h6 className='section-label mb-1 mt-3'>Personal Information</h6>\n          <ul className='list-unstyled'>\n            <li className='mb-1'>\n              <Mail className='me-75' size={17} />\n              <span className='align-middle'>lucifer@email.com</span>\n            </li>\n            <li className='mb-1'>\n              <PhoneCall className='me-50' size={17} />\n              <span className='align-middle'> +1(123) 456 - 7890</span>\n            </li>\n            <li>\n              <Clock className='me-50' size={17} />\n              <span className='align-middle'> Mon - Fri 10AM - 8PM</span>\n            </li>\n          </ul>\n        </div>\n        <div className='more-options'>\n          <h6 className='section-label mb-1 mt-3'>Options</h6>\n          <ul className='list-unstyled'>\n            <li className='cursor-pointer mb-1'>\n              <Tag className='me-50' size={17} />\n              <span className='align-middle'> Add Tag</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Star className='me-50' size={17} />\n              <span className='align-middle'> Important Contact</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Image className='me-50' size={17} />\n              <span className='align-middle'> Shared Media</span>\n            </li>\n            <li className='cursor-pointer mb-1'>\n              <Trash className='me-50' size={17} />\n              <span className='align-middle'> Delete Contact</span>\n            </li>\n            <li className='cursor-pointer'>\n              <Slash className='me-75' size={17} />\n              <span className='align-middle'>Block Contact</span>\n            </li>\n          </ul>\n        </div>\n      </PerfectScrollbar>\n    </div>\n  )\n}\n\nexport default UserProfileSidebar\n","// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Chat App Component Imports\nimport Chat from './Chat'\nimport Sidebar from './SidebarLeft'\nimport UserProfileSidebar from './UserProfileSidebar'\n\n// ** Third Party Components\nimport classnames from 'classnames'\n\n// ** Store & Actions\nimport { useDispatch, useSelector } from 'react-redux'\nimport { getUserProfile, getChatContacts } from './store'\n\nimport '@styles/base/pages/app-chat.scss'\nimport '@styles/base/pages/app-chat-list.scss'\n\nconst AppChat = () => {\n  // ** Store Vars\n  const dispatch = useDispatch()\n  const store = useSelector(state => state.chat)\n\n  // ** States\n  const [user, setUser] = useState({})\n  const [sidebar, setSidebar] = useState(false)\n  const [userSidebarRight, setUserSidebarRight] = useState(false)\n  const [userSidebarLeft, setUserSidebarLeft] = useState(false)\n\n  // ** Sidebar & overlay toggle functions\n  const handleSidebar = () => setSidebar(!sidebar)\n  const handleUserSidebarLeft = () => setUserSidebarLeft(!userSidebarLeft)\n  const handleUserSidebarRight = () => setUserSidebarRight(!userSidebarRight)\n  const handleOverlayClick = () => {\n    setSidebar(false)\n    setUserSidebarRight(false)\n    setUserSidebarLeft(false)\n  }\n\n  // ** Set user function for Right Sidebar\n  const handleUser = obj => setUser(obj)\n\n  // ** Get data on Mount\n  useEffect(() => {\n    dispatch(getChatContacts())\n    dispatch(getUserProfile())\n  }, [dispatch])\n\n  return (\n    <Fragment>\n      <Sidebar\n        store={store}\n        sidebar={sidebar}\n        handleSidebar={handleSidebar}\n        userSidebarLeft={userSidebarLeft}\n        handleUserSidebarLeft={handleUserSidebarLeft}\n      />\n      <div className='content-right'>\n        <div className='content-wrapper'>\n          <div className='content-body'>\n            <div\n              className={classnames('body-content-overlay', {\n                show: userSidebarRight === true || sidebar === true || userSidebarLeft === true\n              })}\n              onClick={handleOverlayClick}\n            ></div>\n            <Chat\n              store={store}\n              handleUser={handleUser}\n              handleSidebar={handleSidebar}\n              userSidebarLeft={userSidebarLeft}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n            <UserProfileSidebar\n              user={user}\n              userSidebarRight={userSidebarRight}\n              handleUserSidebarRight={handleUserSidebarRight}\n            />\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  )\n}\n\nexport default AppChat\n"],"sourceRoot":""}