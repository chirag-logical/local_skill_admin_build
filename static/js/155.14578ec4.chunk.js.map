{"version":3,"sources":["views/extensions/import-export/ExportSelected.js","@core/components/extensions-header/index.js"],"names":["initialData","id","name","username","email","website","ExportSelected","useState","data","value","setValue","modal","setModal","fileName","setFileName","filteredData","setFilteredData","dataToExport","setDataToExport","fileFormat","setFileFormat","selectedRows","setSelectedRows","toggleModal","renderTableData","map","col","className","classnames","selected","includes","type","onChange","selectedRowsArr","splice","indexOf","push","handleSelect","checked","title","subTitle","link","sm","color","onClick","for","bsSize","e","target","length","filter","startsWithCondition","toLowerCase","startsWith","toString","includesCondition","handleFilter","responsive","label","i","handleSelectAll","isOpen","toggle","onClosed","placeholder","exportArr","item","wb","utils","json_to_sheet","wbout","book_new","book_append_sheet","writeFile","handleExport","ExtensionsHeader","props","href","rel"],"mappings":"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","file":"static/js/155.14578ec4.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Custom Components\nimport ExtensionsHeader from '@components/extensions-header'\n\n// ** Reactstrap Imports\nimport {\n  Row,\n  Col,\n  Card,\n  Table,\n  Modal,\n  Input,\n  Label,\n  Button,\n  CardBody,\n  ModalBody,\n  ModalHeader,\n  ModalFooter\n} from 'reactstrap'\n\n// ** Third Party Components\nimport classnames from 'classnames'\nimport { utils, writeFile } from 'xlsx'\n\nconst initialData = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n    website: 'hildegard.org'\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n    website: 'anastasia.net'\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n    website: 'ramiro.info'\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n    website: 'kale.biz'\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n    website: 'demarco.info'\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n    website: 'ola.org'\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n    website: 'elvis.io'\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n    website: 'jacynthe.com'\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n    website: 'conrad.com'\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n    website: 'ambrose.net'\n  }\n]\n\nconst ExportSelected = () => {\n  // ** States\n  const [data] = useState(initialData)\n  const [value, setValue] = useState('')\n  const [modal, setModal] = useState(false)\n  const [fileName, setFileName] = useState('')\n  const [filteredData, setFilteredData] = useState([])\n  const [dataToExport, setDataToExport] = useState([])\n  const [fileFormat, setFileFormat] = useState('xlsx')\n  const [selectedRows, setSelectedRows] = useState([])\n\n  const toggleModal = () => setModal(!modal)\n\n  const handleFilter = e => {\n    let filteredData = []\n    const value = e.target.value\n    setValue(value)\n    if (value.length) {\n      filteredData = data.filter(col => {\n        const startsWithCondition =\n          col.name.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.email.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.website.toLowerCase().startsWith(value.toLowerCase()) ||\n          col.id.toString().toLowerCase().startsWith(value.toLowerCase())\n\n        const includesCondition =\n          col.name.toLowerCase().includes(value.toLowerCase()) ||\n          col.email.toLowerCase().includes(value.toLowerCase()) ||\n          col.website.toLowerCase().includes(value.toLowerCase()) ||\n          col.id.toString().toLowerCase().includes(value.toLowerCase())\n\n        if (startsWithCondition) return startsWithCondition\n        else if (!startsWithCondition && includesCondition) return includesCondition\n        else return null\n      })\n      setValue(value)\n      setFilteredData(filteredData)\n    }\n  }\n\n  const handleExport = () => {\n    const exportArr = dataToExport\n    data.map(item => {\n      if (selectedRows.includes(item.id)) {\n        return exportArr.push(item)\n      } else {\n        return null\n      }\n    })\n    setDataToExport([...exportArr])\n    const name = fileName.length ? `${fileName}.${fileFormat}` : `excel-sheet.${fileFormat}`\n    const wb = utils.json_to_sheet(dataToExport)\n    const wbout = utils.book_new()\n    utils.book_append_sheet(wbout, wb, 'test')\n    writeFile(wbout, name)\n    toggleModal()\n  }\n\n  const handleSelect = id => {\n    const selectedRowsArr = selectedRows\n    if (!selectedRowsArr.includes(id)) {\n      selectedRowsArr.push(id)\n    } else if (selectedRowsArr.includes(id)) {\n      selectedRowsArr.splice(selectedRowsArr.indexOf(id), 1)\n    } else {\n      return null\n    }\n    setSelectedRows([...selectedRowsArr])\n  }\n\n  const handleSelectAll = () => {\n    let selectedRowsArr = selectedRows\n    if (selectedRowsArr.length < data.length) {\n      const ids = data.map(i => i.id)\n      selectedRowsArr = ids\n    } else if (selectedRowsArr.length === data.length) {\n      selectedRowsArr = []\n    } else {\n      return null\n    }\n\n    setSelectedRows(selectedRowsArr)\n  }\n\n  const array = value ? filteredData : data\n  const renderTableData = array.map(col => {\n    return (\n      <tr\n        key={col.id}\n        className={classnames({\n          selected: selectedRows.includes(col.id)\n        })}\n      >\n        <td>\n          <div className='form-check'>\n            <Input\n              id={col.id}\n              type='checkbox'\n              onChange={() => handleSelect(col.id)}\n              checked={!!selectedRows.includes(col.id)}\n            />\n          </div>\n        </td>\n        <td>{col.email}</td>\n        <td>{col.name}</td>\n        <td>{col.website}</td>\n        <td>{col.id}</td>\n      </tr>\n    )\n  })\n\n  return (\n    <Fragment>\n      <ExtensionsHeader\n        title='XLSX'\n        subTitle='Xlsx is a parser and writer for various spreadsheet formats'\n        link='https://github.com/SheetJS/sheetjs'\n      />\n      <Row className='export-component'>\n        <Col sm='12'>\n          <Card>\n            <CardBody className='pb-0'>\n              <div className='d-flex flex-wrap justify-content-between'>\n                <Button color='primary' onClick={() => toggleModal()}>\n                  Export Selected\n                </Button>\n                <div className='d-flex align-items-center justify-content-end'>\n                  <Label for='search-input' className='me-1'>\n                    Search\n                  </Label>\n                  <Input id='search-input' bsSize='sm' type='text' value={value} onChange={e => handleFilter(e)} />\n                </div>\n              </div>\n            </CardBody>\n            <Table className='table-hover-animation mt-2' responsive>\n              <thead>\n                <tr>\n                  <th>\n                    <div className='form-check'>\n                      <Input\n                        type='checkbox'\n                        id='select-all'\n                        label=''\n                        checked={!!selectedRows.length}\n                        onChange={() => handleSelectAll()}\n                      />\n                    </div>\n                  </th>\n                  <th>Email</th>\n                  <th>Name</th>\n                  <th>Website</th>\n                  <th>Rank</th>\n                </tr>\n              </thead>\n              <tbody>{renderTableData}</tbody>\n            </Table>\n          </Card>\n        </Col>\n      </Row>\n      <Modal\n        isOpen={modal}\n        toggle={() => toggleModal()}\n        className='modal-dialog-centered'\n        onClosed={() => setFileName('')}\n      >\n        <ModalHeader toggle={() => toggleModal()}>Export To Excel</ModalHeader>\n        <ModalBody>\n          <div className='mb-2'>\n            <Input\n              type='text'\n              value={fileName}\n              onChange={e => setFileName(e.target.value)}\n              placeholder='Enter File Name'\n            />\n          </div>\n          <div>\n            <Input\n              type='select'\n              id='selectFileFormat'\n              name='customSelect'\n              value={fileFormat}\n              onChange={e => {\n                setFileFormat(e.target.value)\n              }}\n            >\n              <option>xlsx</option>\n              <option>csv</option>\n              <option>txt</option>\n            </Input>\n          </div>\n        </ModalBody>\n        <ModalFooter>\n          <Button color='primary' onClick={() => handleExport()}>\n            Export\n          </Button>\n          <Button color='flat-danger' onClick={() => toggleModal()}>\n            Cancel\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </Fragment>\n  )\n}\n\nexport default ExportSelected\n","// ** React Imports\nimport Proptypes from 'prop-types'\n\n// ** Reactstrap Imports\nimport { Row, Col } from 'reactstrap'\n\nconst ExtensionsHeader = props => {\n  return (\n    <Row className='mb-2'>\n      <Col sm='12' className='ms-50'>\n        <p className='font-medium-5 mt-1 extension-title' data-tour='extension-title'>\n          {props.title}\n        </p>\n        {props.link ? (\n          <a href={props.link} target='_blank' rel='noopener noreferrer'>\n            {props.subTitle}\n          </a>\n        ) : (\n          <p className='text-primary'>{props.subTitle}</p>\n        )}\n      </Col>\n    </Row>\n  )\n}\nexport default ExtensionsHeader\n\n// ** PropTypes\nExtensionsHeader.propTypes = {\n  link: Proptypes.string,\n  title: Proptypes.string.isRequired,\n  subTitle: Proptypes.string.isRequired\n}\n"],"sourceRoot":""}