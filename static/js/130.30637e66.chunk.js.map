{"version":3,"sources":["views/components/spinners/SpinnerFlex.js","views/components/spinners/SpinnerFloat.js","views/components/spinners/SpinnerSizes.js","views/components/spinners/SpinnerGrowing.js","views/components/spinners/SpinnerBorder.js","views/components/spinners/SpinnerColors.js","views/components/spinners/SpinnerButtons.js","views/components/spinners/SpinnerGrowingColored.js","views/components/spinners/SpinnerTextAlignment.js","views/components/spinners/SpinnerSourceCode.js","views/components/spinners/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["SpinnerFlex","className","SpinnerFloat","SpinnerSizes","size","type","style","height","width","SpinnerGrowing","SpinnerBorder","SpinnerColors","color","SpinnerButton","outline","disabled","SpinnerGrowColors","SpinnerTextAlignment","spinnerBorder","spinnerColors","spinnerGrowing","spinnerGrowColors","spinnerFlex","spinnerFloat","spinnerTextAlignment","spinnerSizes","spinnerButton","Spinners","useEffect","Prism","highlightAll","title","data","md","sm","code","SpinnerButtons","BreadCrumbs","props","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","end","CardSnippet","children","noBody","iconCode","useState","isOpen","setIsOpen","IconCode","CardBody","onClick"],"mappings":"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","file":"static/js/130.30637e66.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFlex = () => {\n  return (\n    <Fragment>\n      <div className='d-flex justify-content-center my-1'>\n        <Spinner />\n      </div>\n\n      <div className='d-flex justify-content-between align-items-center'>\n        <strong>Loading...</strong>\n        <Spinner />\n      </div>\n    </Fragment>\n  )\n}\nexport default SpinnerFlex\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFloat = () => {\n  return <Spinner className='float-end mb-2' />\n}\nexport default SpinnerFloat\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerSizes = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <div>\n        <Spinner className='me-25' size='sm' />\n        <Spinner type='grow' size='sm' />\n      </div>\n      <div>\n        <Spinner className='me-25' />\n        <Spinner type='grow' />\n      </div>\n      <div>\n        <Spinner className='me-25' style={{ height: '3rem', width: '3rem' }} />\n        <Spinner type='grow' style={{ height: '3rem', width: '3rem' }} />\n      </div>\n    </div>\n  )\n}\nexport default SpinnerSizes\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowing = () => {\n  return <Spinner type='grow' />\n}\nexport default SpinnerGrowing\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerBorder = () => {\n  return <Spinner />\n}\nexport default SpinnerBorder\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerColors = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Spinner color='primary' />\n      <Spinner color='secondary' />\n      <Spinner color='success' />\n      <Spinner color='danger' />\n      <Spinner color='warning' />\n      <Spinner color='info' />\n      <Spinner color='light' />\n      <Spinner color='dark' />\n    </div>\n  )\n}\nexport default SpinnerColors\n","// ** Reactstrap Imports\nimport { Button, Spinner } from 'reactstrap'\n\nconst SpinnerButton = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' />\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' type='grow' />\n      </Button>\n\n      <Button color='primary' outline disabled>\n        <Spinner size='sm' type='grow' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n    </div>\n  )\n}\nexport default SpinnerButton\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowColors = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Spinner type='grow' color='primary' />\n      <Spinner type='grow' color='secondary' />\n      <Spinner type='grow' color='success' />\n      <Spinner type='grow' color='danger' />\n      <Spinner type='grow' color='warning' />\n      <Spinner type='grow' color='info' />\n      <Spinner type='grow' color='light' />\n      <Spinner type='grow' color='dark' />\n    </div>\n  )\n}\nexport default SpinnerGrowColors\n","// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerTextAlignment = () => {\n  return (\n    <div className='text-center'>\n      <Spinner />\n    </div>\n  )\n}\nexport default SpinnerTextAlignment\n","export const spinnerBorder = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerBorder = () => {\n  return <Spinner />\n}\nexport default SpinnerBorder\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerColors = () => {\n  return (\n    <React.Fragment>\n      <Spinner color='primary' />\n      <Spinner color='secondary' />\n      <Spinner color='success' />\n      <Spinner color='danger' />\n      <Spinner color='warning' />\n      <Spinner color='info' />\n      <Spinner color='light' />\n      <Spinner color='dark' />\n    </React.Fragment>\n  )\n}\nexport default SpinnerColors\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowing = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowing = () => {\n  return <Spinner type='grow' color='primary' />\n}\nexport default SpinnerGrowing\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerGrowColors = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerGrowColors = () => {\n  return (\n    <React.Fragment>\n      <Spinner type='grow' color='primary' />\n      <Spinner type='grow' color='secondary' />\n      <Spinner type='grow' color='success' />\n      <Spinner type='grow' color='danger' />\n      <Spinner type='grow' color='warning' />\n      <Spinner type='grow' color='info' />\n      <Spinner type='grow' color='light' />\n      <Spinner type='grow' color='dark' />\n    </React.Fragment>\n  )\n}\nexport default SpinnerGrowColors`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFlex = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFlex = () => {\n  return (\n    <React.Fragment>\n      <div className='d-flex justify-content-center my-1'>\n        <Spinner />\n      </div>\n\n      <div className='d-flex justify-content-between align-items-center'>\n        <strong>Loading...</strong>\n        <Spinner />\n      </div>\n    </React.Fragment>\n  )\n}\nexport default SpinnerFlex\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerFloat = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerFloat = () => {\n  return <Spinner className='float-end mb-2' />\n}\nexport default SpinnerFloat\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerTextAlignment = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerTextAlignment = () => {\n  return (\n    <div className='text-center'>\n      <Spinner />\n    </div>\n  )\n}\nexport default SpinnerTextAlignment\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerSizes = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Spinner } from 'reactstrap'\n\nconst SpinnerSizes = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <div>\n        <Spinner className='me-25' size='sm' />\n        <Spinner type='grow' size='sm' />\n      </div>\n      <div>\n        <Spinner className='me-25' />\n        <Spinner type='grow' />\n      </div>\n      <div>\n        <Spinner className='me-25' size='lg' />\n        <Spinner type='grow' size='lg' />\n      </div>\n    </div>\n  )\n}\nexport default SpinnerSizes\n`}\n    </code>\n  </pre>\n)\n\nexport const spinnerButton = (\n  <pre>\n    <code className='language-jsx'>\n      {`\n\nimport { Button, Spinner } from 'reactstrap'\n\nconst SpinnerButton = () => {\n  return (\n    <div className='demo-inline-spacing'>\n      <Button color='primary'>\n        <Spinner color='white' size='sm' />\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' type='grow' />\n      </Button>\n\n      <Button color='primary'>\n        <Spinner color='white' size='sm' type='grow' />\n        <span className='ms-50'>Loading...</span>\n      </Button>\n    </div>\n  )\n}\nexport default SpinnerButton\n`}\n    </code>\n  </pre>\n)\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Demo Components\nimport SpinnerFlex from './SpinnerFlex'\nimport SpinnerFloat from './SpinnerFloat'\nimport SpinnerSizes from './SpinnerSizes'\nimport SpinnerGrow from './SpinnerGrowing'\nimport SpinnerBorder from './SpinnerBorder'\nimport SpinnerColors from './SpinnerColors'\nimport SpinnerButtons from './SpinnerButtons'\nimport SpinnerGrowColors from './SpinnerGrowingColored'\nimport SpinnerTextAlignment from './SpinnerTextAlignment'\n\n// ** Source Code\nimport {\n  spinnerFlex,\n  spinnerFloat,\n  spinnerSizes,\n  spinnerBorder,\n  spinnerButton,\n  spinnerColors,\n  spinnerGrowing,\n  spinnerGrowColors,\n  spinnerTextAlignment\n} from './SpinnerSourceCode'\n\nconst Spinners = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Spinners' data={[{ title: 'Components' }, { title: 'Spinners' }]} />\n      <Row className='match-height'>\n        <Col md='6' sm='12'>\n          <Card title='Border Spinner' code={spinnerBorder}>\n            <CardText>\n              Use <code>Spinner</code> tag to create a bordered spinner.\n            </CardText>\n            <SpinnerBorder />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Colors' code={spinnerColors}>\n            <CardText className='mb-0'>\n              Use <code>color</code> attribute to create a colored spinner.\n            </CardText>\n            <SpinnerColors />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Growing Spinner' code={spinnerGrowing}>\n            <CardText>\n              Use <code>type=\"grow\"</code> with spinner tag to create a growing spinner.\n            </CardText>\n            <SpinnerGrow />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Colored Growing Spinners' code={spinnerGrowColors}>\n            <CardText className='mb-0'>\n              Use <code>color</code> and <code>type</code> attribute to create a colored growing spinner.\n            </CardText>\n            <SpinnerGrowColors />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Flex' code={spinnerFlex}>\n            <CardText>\n              Use Flexbox utilities to place spinners.Use <code>.d-flex</code> and <code>.justify-content-[side]</code>.\n            </CardText>\n            <SpinnerFlex />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Float' code={spinnerFloat}>\n            <CardText>\n              Use <code>.float-[side]</code> with spinner tag to change spinner's position.\n            </CardText>\n            <SpinnerFloat />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Text Alignment' code={spinnerTextAlignment}>\n            <CardText>\n              You can also use <code>.text-[side]</code> as a wrapper to spinner tag to change spinner's position.\n            </CardText>\n            <SpinnerTextAlignment />\n          </Card>\n        </Col>\n        <Col md='6' sm='12'>\n          <Card title='Sizes' code={spinnerSizes}>\n            <CardText className='mb-0'>\n              Use prop <code>size=\"sm\"</code> for Small spinner or use <code>style</code> prop for custom size.\n            </CardText>\n            <SpinnerSizes />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Buttons' code={spinnerButton}>\n            <SpinnerButtons />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Spinners\n","// ** React Imports\nimport { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  DropdownMenu,\n  DropdownItem,\n  BreadcrumbItem,\n  DropdownToggle,\n  UncontrolledButtonDropdown\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { data, title } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag='li'\n          key={index}\n          active={!isLastItem}\n          className={classnames({ 'text-primary': !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\n        <div className='breadcrumb-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' end>\n              <DropdownItem tag={Link} to='/apps/todo'>\n                <CheckSquare className='me-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='me-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='me-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='me-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}