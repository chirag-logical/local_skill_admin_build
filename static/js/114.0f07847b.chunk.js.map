{"version":3,"sources":["views/components/accordion/AccordionSourceCode.js","views/components/accordion/AccordionHover.js","views/components/accordion/AccordionBorder.js","views/components/accordion/AccordionMargin.js","views/components/accordion/AccordionControlled.js","views/components/accordion/AccordionUncontrolled.js","views/components/accordion/AccordionWithoutArrow.js","views/components/accordion/index.js","@core/components/breadcrumbs/index.js","@core/components/card-snippet/index.js"],"names":["accordionControlled","className","accordionWithoutArrow","accordionBorder","accordionMargin","accordionHover","AccordionHover","useState","open","setOpen","toggle","id","onMouseEnter","onMouseLeave","targetId","accordionId","AccordionBorder","AccordionMargin","AccordionControlled","AccordionUncontrolled","defaultOpen","AccordionWithoutArrow","Accordion","useEffect","Prism","highlightAll","title","data","sm","code","BreadCrumbs","props","tag","to","map","item","index","Wrapper","link","Link","Fragment","isLastItem","length","active","classnames","color","size","end","CardSnippet","children","noBody","iconCode","isOpen","setIsOpen","IconCode","CardBody","onClick"],"mappings":"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","file":"static/js/114.0f07847b.chunk.js","sourcesContent":["export const accordionUncontrolled = (\n  <pre>\n    <code className='language-jsx'>{`import { UncontrolledAccordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionUncontrolled = () => {\n  return (\n    <UncontrolledAccordion defaultOpen='1'>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          <strong>This is the first item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          <strong>This is the second item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n    </UncontrolledAccordion>\n  )\n}\n\nexport default AccordionUncontrolled\n`}</code>\n  </pre>\n)\n\nexport const accordionControlled = (\n  <pre>\n    <code className='language-jsx'>{`import { useState } from 'react'\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionBasic = () => {\n  const [open, setOpen] = useState('1')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          <strong>This is the first item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          <strong>This is the second item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\nexport default AccordionBasic`}</code>\n  </pre>\n)\n\nexport const accordionWithoutArrow = (\n  <pre>\n    <code className='language-jsx'>{`import { useState } from 'react'\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionWithoutArrow = () => {\n  const [open, setOpen] = useState('1')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion className='accordion-without-arrow' open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Lemon drops chocolate cake gummies carrot cake chupa chups muffin topping. Sesame snaps icing marzipan gummi\n          bears macaroon dragée danish caramels powder. Bear claw dragée pastry topping soufflé. Wafer gummi bears\n          marshmallow pastry pie.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Dessert ice cream donut oat cake jelly-o pie sugar plum cheesecake. Bear claw dragée oat cake dragée ice cream\n          halvah tootsie roll. Danish cake oat cake pie macaroon tart donut gummies. Jelly beans candy canes carrot\n          cake. Fruitcake chocolate chupa chups.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Oat cake toffee chocolate bar jujubes. Marshmallow brownie lemon drops cheesecake. Bonbon gingerbread\n          marshmallow sweet jelly beans muffin. Sweet roll bear claw candy canes oat cake dragée caramels. Ice cream\n          wafer danish cookie caramels muffin.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Pastry pudding cookie toffee bonbon jujubes jujubes powder topping. Jelly beans gummi bears sweet roll bonbon\n          muffin liquorice. Wafer lollipop sesame snaps. Brownie macaroon cookie claw candy canes muffin cupcake candy\n          caramels tiramisu.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\nexport default AccordionWithoutArrow\n`}</code>\n  </pre>\n)\n\nexport const accordionBorder = (\n  <pre>\n    <code className='language-jsx'>{`import { useState } from 'react'\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionBorder = () => {\n  const [open, setOpen] = useState('')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion className='accordion-border' open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Gummi bears toffee soufflé jelly carrot cake pudding sweet roll bear claw. Sweet roll gingerbread wafer\n          liquorice cake tiramisu. Gummi bears caramels bonbon icing croissant lollipop topping lollipop danish.\n          Marzipan tootsie roll bonbon toffee icing lollipop cotton candy pie gummies. Gingerbread bear claw chocolate\n          cake bonbon. Liquorice marzipan cotton candy liquorice tootsie roll macaroon marzipan danish.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Marzipan candy apple pie icing. Sweet roll pudding dragée icing icing cookie pie fruitcake caramels. Bonbon\n          candy canes candy canes. Dragée jelly beans chocolate bar dragée biscuit fruitcake gingerbread toffee apple\n          pie. Gingerbread donut powder ice cream sesame snaps jelly beans oat cake. Candy wafer pudding dragée gummies.\n          Carrot cake macaroon cake sesame snaps caramels.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\nexport default AccordionBorder\n`}</code>\n  </pre>\n)\n\nexport const accordionMargin = (\n  <pre>\n    <code className='language-jsx'>{`import { useState } from 'react'\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionMargin = () => {\n  const [open, setOpen] = useState('')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion className='accordion-margin' open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Pastry pudding cookie toffee bonbon jujubes jujubes powder topping. Jelly beans gummi bears sweet roll bonbon\n          muffin liquorice. Wafer lollipop sesame snaps. Brownie macaroon cookie muffin cupcake candy caramels tiramisu.\n          Oat cake chocolate cake sweet jelly-o brownie biscuit marzipan. Jujubes donut marzipan chocolate bar. Jujubes\n          sugar plum jelly beans tiramisu icing cheesecake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Sweet pie candy jelly. Sesame snaps biscuit sugar plum. Sweet roll topping fruitcake. Caramels liquorice\n          biscuit ice cream fruitcake cotton candy tart. Donut caramels gingerbread jelly-o gingerbread pudding. Gummi\n          bears pastry marshmallow candy canes pie. Pie apple pie carrot cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Tart gummies dragée lollipop fruitcake pastry oat cake. Cookie jelly jelly macaroon icing jelly beans soufflé\n          cake sweet. Macaroon sesame snaps cheesecake tart cake sugar plum. Dessert jelly-o sweet muffin chocolate\n          candy pie tootsie roll marzipan. Carrot cake marshmallow pastry. Bonbon biscuit pastry topping toffee dessert\n          gummies. Topping apple pie pie croissant cotton candy dessert tiramisu.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Cheesecake muffin cupcake dragée lemon drops tiramisu cake gummies chocolate cake. Marshmallow tart croissant.\n          Tart dessert tiramisu marzipan lollipop lemon drops. Cake bonbon bonbon gummi bears topping jelly beans\n          brownie jujubes muffin. Donut croissant jelly-o cake marzipan. Liquorice marzipan cookie wafer tootsie roll.\n          Tootsie roll sweet cupcake.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\nexport default AccordionMargin`}</code>\n  </pre>\n)\n\nexport const accordionHover = (\n  <pre>\n    <code className='language-jsx'>{`import { useState } from 'react'\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionHover = () => {\n  const [open, setOpen] = useState('')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion open={open} toggle={toggle}>\n      <AccordionItem onMouseEnter={() => toggle('1')} onMouseLeave={() => toggle('1')}>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Gummi bears toffee soufflé jelly carrot cake pudding sweet roll bear claw. Sweet roll gingerbread wafer\n          liquorice cake tiramisu. Gummi bears caramels bonbon icing croissant lollipop topping lollipop danish.\n          Marzipan tootsie roll bonbon toffee icing lollipop cotton candy pie gummies. Gingerbread bear claw chocolate\n          cake bonbon. Liquorice marzipan cotton candy liquorice tootsie roll macaroon marzipan danish.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem onMouseEnter={() => toggle('2')} onMouseLeave={() => toggle('2')}>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem onMouseEnter={() => toggle('3')} onMouseLeave={() => toggle('3')}>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem onMouseEnter={() => toggle('4')} onMouseLeave={() => toggle('4')}>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Marzipan candy apple pie icing. Sweet roll pudding dragée icing icing cookie pie fruitcake caramels. Bonbon\n          candy canes candy canes. Dragée jelly beans chocolate bar dragée biscuit fruitcake gingerbread toffee apple\n          pie. Gingerbread donut powder ice cream sesame snaps jelly beans oat cake. Candy wafer pudding dragée gummies.\n          Carrot cake macaroon cake sesame snaps caramels.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\nexport default AccordionHover\n`}</code>\n  </pre>\n)\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionHover = () => {\n  // ** State\n  const [open, setOpen] = useState('')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion open={open} toggle={toggle}>\n      <AccordionItem onMouseEnter={() => toggle('1')} onMouseLeave={() => toggle('1')}>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Gummi bears toffee soufflé jelly carrot cake pudding sweet roll bear claw. Sweet roll gingerbread wafer\n          liquorice cake tiramisu. Gummi bears caramels bonbon icing croissant lollipop topping lollipop danish.\n          Marzipan tootsie roll bonbon toffee icing lollipop cotton candy pie gummies. Gingerbread bear claw chocolate\n          cake bonbon. Liquorice marzipan cotton candy liquorice tootsie roll macaroon marzipan danish.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem onMouseEnter={() => toggle('2')} onMouseLeave={() => toggle('2')}>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem onMouseEnter={() => toggle('3')} onMouseLeave={() => toggle('3')}>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem onMouseEnter={() => toggle('4')} onMouseLeave={() => toggle('4')}>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Marzipan candy apple pie icing. Sweet roll pudding dragée icing icing cookie pie fruitcake caramels. Bonbon\n          candy canes candy canes. Dragée jelly beans chocolate bar dragée biscuit fruitcake gingerbread toffee apple\n          pie. Gingerbread donut powder ice cream sesame snaps jelly beans oat cake. Candy wafer pudding dragée gummies.\n          Carrot cake macaroon cake sesame snaps caramels.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\nexport default AccordionHover\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionBorder = () => {\n  // ** State\n  const [open, setOpen] = useState('')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion className='accordion-border' open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Gummi bears toffee soufflé jelly carrot cake pudding sweet roll bear claw. Sweet roll gingerbread wafer\n          liquorice cake tiramisu. Gummi bears caramels bonbon icing croissant lollipop topping lollipop danish.\n          Marzipan tootsie roll bonbon toffee icing lollipop cotton candy pie gummies. Gingerbread bear claw chocolate\n          cake bonbon. Liquorice marzipan cotton candy liquorice tootsie roll macaroon marzipan danish.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Soufflé sugar plum bonbon lemon drops candy canes icing brownie. Dessert tart dessert apple pie. Muffin wafer\n          cookie. Soufflé fruitcake lollipop chocolate bar. Muffin gummi bears marzipan sesame snaps gummi bears topping\n          toffee. Cupcake bonbon muffin. Cake caramels candy lollipop cheesecake bonbon soufflé apple pie cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Marzipan candy apple pie icing. Sweet roll pudding dragée icing icing cookie pie fruitcake caramels. Bonbon\n          candy canes candy canes. Dragée jelly beans chocolate bar dragée biscuit fruitcake gingerbread toffee apple\n          pie. Gingerbread donut powder ice cream sesame snaps jelly beans oat cake. Candy wafer pudding dragée gummies.\n          Carrot cake macaroon cake sesame snaps caramels.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\nexport default AccordionBorder\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionMargin = () => {\n  // ** State\n  const [open, setOpen] = useState('')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion className='accordion-margin' open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Pastry pudding cookie toffee bonbon jujubes jujubes powder topping. Jelly beans gummi bears sweet roll bonbon\n          muffin liquorice. Wafer lollipop sesame snaps. Brownie macaroon cookie muffin cupcake candy caramels tiramisu.\n          Oat cake chocolate cake sweet jelly-o brownie biscuit marzipan. Jujubes donut marzipan chocolate bar. Jujubes\n          sugar plum jelly beans tiramisu icing cheesecake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Sweet pie candy jelly. Sesame snaps biscuit sugar plum. Sweet roll topping fruitcake. Caramels liquorice\n          biscuit ice cream fruitcake cotton candy tart. Donut caramels gingerbread jelly-o gingerbread pudding. Gummi\n          bears pastry marshmallow candy canes pie. Pie apple pie carrot cake.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Tart gummies dragée lollipop fruitcake pastry oat cake. Cookie jelly jelly macaroon icing jelly beans soufflé\n          cake sweet. Macaroon sesame snaps cheesecake tart cake sugar plum. Dessert jelly-o sweet muffin chocolate\n          candy pie tootsie roll marzipan. Carrot cake marshmallow pastry. Bonbon biscuit pastry topping toffee dessert\n          gummies. Topping apple pie pie croissant cotton candy dessert tiramisu.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Cheesecake muffin cupcake dragée lemon drops tiramisu cake gummies chocolate cake. Marshmallow tart croissant.\n          Tart dessert tiramisu marzipan lollipop lemon drops. Cake bonbon bonbon gummi bears topping jelly beans\n          brownie jujubes muffin. Donut croissant jelly-o cake marzipan. Liquorice marzipan cookie wafer tootsie roll.\n          Tootsie roll sweet cupcake.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\nexport default AccordionMargin\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionControlled = () => {\n  // ** State\n  const [open, setOpen] = useState('1')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          <strong>This is the first item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          <strong>This is the second item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\nexport default AccordionControlled\n","// ** Reactstrap Imports\nimport { UncontrolledAccordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionUncontrolled = () => {\n  return (\n    <UncontrolledAccordion defaultOpen='1'>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          <strong>This is the first item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          <strong>This is the second item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          <strong>This is the third item's accordion body.</strong> You can modify any of this with custom CSS or\n          overriding our default variables. It's also worth noting that just about any HTML can go within the{' '}\n          <code>&lt;AccordionBody&gt;</code>, though the transition does limit overflow.\n        </AccordionBody>\n      </AccordionItem>\n    </UncontrolledAccordion>\n  )\n}\n\nexport default AccordionUncontrolled\n","// ** React Imports\nimport { useState } from 'react'\n\n// ** Reactstrap Imports\nimport { Accordion, AccordionBody, AccordionHeader, AccordionItem } from 'reactstrap'\n\nconst AccordionWithoutArrow = () => {\n  // ** State\n  const [open, setOpen] = useState('1')\n\n  const toggle = id => {\n    open === id ? setOpen() : setOpen(id)\n  }\n\n  return (\n    <Accordion className='accordion-without-arrow' open={open} toggle={toggle}>\n      <AccordionItem>\n        <AccordionHeader targetId='1'>Accordion Item 1</AccordionHeader>\n        <AccordionBody accordionId='1'>\n          Lemon drops chocolate cake gummies carrot cake chupa chups muffin topping. Sesame snaps icing marzipan gummi\n          bears macaroon dragée danish caramels powder. Bear claw dragée pastry topping soufflé. Wafer gummi bears\n          marshmallow pastry pie.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='2'>Accordion Item 2</AccordionHeader>\n        <AccordionBody accordionId='2'>\n          Dessert ice cream donut oat cake jelly-o pie sugar plum cheesecake. Bear claw dragée oat cake dragée ice cream\n          halvah tootsie roll. Danish cake oat cake pie macaroon tart donut gummies. Jelly beans candy canes carrot\n          cake. Fruitcake chocolate chupa chups.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='3'>Accordion Item 3</AccordionHeader>\n        <AccordionBody accordionId='3'>\n          Oat cake toffee chocolate bar jujubes. Marshmallow brownie lemon drops cheesecake. Bonbon gingerbread\n          marshmallow sweet jelly beans muffin. Sweet roll bear claw candy canes oat cake dragée caramels. Ice cream\n          wafer danish cookie caramels muffin.\n        </AccordionBody>\n      </AccordionItem>\n      <AccordionItem>\n        <AccordionHeader targetId='4'>Accordion Item 4</AccordionHeader>\n        <AccordionBody accordionId='4'>\n          Pastry pudding cookie toffee bonbon jujubes jujubes powder topping. Jelly beans gummi bears sweet roll bonbon\n          muffin liquorice. Wafer lollipop sesame snaps. Brownie macaroon cookie claw candy canes muffin cupcake candy\n          caramels tiramisu.\n        </AccordionBody>\n      </AccordionItem>\n    </Accordion>\n  )\n}\n\nexport default AccordionWithoutArrow\n","// ** React Imports\nimport { Fragment, useEffect } from 'react'\n\n// ** Third Party Components\nimport Prism from 'prismjs'\n\n// ** Custom Components\nimport Card from '@components/card-snippet'\nimport BreadCrumbs from '@components/breadcrumbs'\n\n// ** Reactstrap Imports\nimport { Row, Col, CardText } from 'reactstrap'\n\n// ** Source Code\nimport {\n  accordionHover,\n  accordionBorder,\n  accordionMargin,\n  accordionControlled,\n  accordionWithoutArrow\n} from './AccordionSourceCode'\n\n// ** Demo Components\nimport AccordionHover from './AccordionHover'\nimport AccordionBorder from './AccordionBorder'\nimport AccordionMargin from './AccordionMargin'\nimport AccordionControlled from './AccordionControlled'\nimport AccordionUncontrolled from './AccordionUncontrolled'\nimport AccordionWithoutArrow from './AccordionWithoutArrow'\n\nconst Accordion = () => {\n  useEffect(() => {\n    Prism.highlightAll()\n  }, [])\n\n  return (\n    <Fragment>\n      <BreadCrumbs title='Accordions' data={[{ title: 'Components' }, { title: 'Accordions' }]} />\n      <Row>\n        <Col sm='12'>\n          <Card title='Uncontrolled' code={accordionControlled}>\n            <CardText>You may want to open one item at a time, for that you can use accordion.</CardText>\n            <AccordionUncontrolled />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Controlled' code={accordionControlled}>\n            <CardText>Manage a state to control your collapse component.</CardText>\n            <AccordionControlled />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card code={accordionWithoutArrow} title='Accordion Without Arrow'>\n            <CardText>\n              Use class <code>.accordion-without-arrow</code> class with <code>&lt;Accordion&gt;</code> for accordion\n              without arrow.\n            </CardText>\n            <AccordionWithoutArrow />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Border' code={accordionBorder}>\n            <CardText>\n              Use class <code>.accordion-border</code> class with your accordion to create a bordered accordion.\n            </CardText>\n            <AccordionBorder />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Margin' code={accordionMargin}>\n            <CardText>\n              Use class <code>.accordion-margin</code> class with your accordion to create a accordion with margin.\n            </CardText>\n            <AccordionMargin />\n          </Card>\n        </Col>\n        <Col sm='12'>\n          <Card title='Hover' code={accordionHover}>\n            <AccordionHover />\n          </Card>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default Accordion\n","// ** React Imports\nimport { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  DropdownMenu,\n  DropdownItem,\n  BreadcrumbItem,\n  DropdownToggle,\n  UncontrolledButtonDropdown\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { data, title } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag='li'\n          key={index}\n          active={!isLastItem}\n          className={classnames({ 'text-primary': !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\n        <div className='breadcrumb-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' end>\n              <DropdownItem tag={Link} to='/apps/todo'>\n                <CheckSquare className='me-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='me-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='me-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='me-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n","// ** React Imports\nimport { Fragment, useState } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport { Code } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardBody, CardTitle, Collapse } from 'reactstrap'\n\nconst CardSnippet = props => {\n  // ** Props\n  const { title, children, noBody, code, iconCode } = props\n\n  // ** State\n  const [isOpen, setIsOpen] = useState(false)\n\n  // ** If user passes custom icon then render that else render default icon\n  const IconCode = iconCode ? iconCode : <Code size={15} />\n\n  // ** To toggle collapse\n  const toggle = () => setIsOpen(!isOpen)\n\n  // ** If user passes noBody then return <Fragment> else return <CardBody>\n  const Wrapper = noBody ? Fragment : CardBody\n\n  return (\n    <Card className='card-snippet'>\n      <CardHeader>\n        <CardTitle tag='h4'>{title}</CardTitle>\n        <div className='views cursor-pointer' onClick={toggle}>\n          {IconCode}\n        </div>\n      </CardHeader>\n      <Wrapper>{children}</Wrapper>\n      <Collapse isOpen={isOpen}>\n        <CardBody>{code}</CardBody>\n      </Collapse>\n    </Card>\n  )\n}\n\nexport default CardSnippet\n\n// ** PropTypes\nCardSnippet.propTypes = {\n  code: PropTypes.node,\n  noBody: PropTypes.bool,\n  children: PropTypes.any,\n  iconCode: PropTypes.node,\n  className: PropTypes.string,\n  title: PropTypes.string.isRequired\n}\n"],"sourceRoot":""}