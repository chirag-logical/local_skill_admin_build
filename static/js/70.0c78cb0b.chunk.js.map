{"version":3,"sources":["@core/components/card-actions/index.js","views/ui-elements/cards/actions/index.js","@core/components/breadcrumbs/index.js","@core/components/ui-loader/index.js"],"names":["CardActions","props","title","actions","children","collapseIcon","reloadIcon","removeIcon","endReload","useState","reload","setReload","collapse","setCollapse","visibility","setVisibility","Icons","ChevronDown","remove","X","RotateCw","callAction","action","removeReload","useEffect","CollapseWrapper","includes","Collapse","Fragment","BlockUiWrapper","UiLoader","blocking","className","classnames","tag","Array","isArray","map","i","Tag","length","size","onClick","renderIcons","isOpen","data","sm","endLoading","setTimeout","responsive","bordered","md","BreadCrumbs","to","item","index","Wrapper","link","Link","isLastItem","active","color","end","UILoader","loader","overlayColor","style","backgroundColor","defaultProps"],"mappings":"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","file":"static/js/70.0c78cb0b.chunk.js","sourcesContent":["// ** React Imports\nimport { Fragment, useState, useEffect } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport UiLoader from '@components/ui-loader'\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { Card, CardHeader, CardTitle, Collapse } from 'reactstrap'\n\nconst CardActions = props => {\n  // ** Props\n  const { title, actions, children, collapseIcon, reloadIcon, removeIcon, endReload } = props\n\n  // ** States\n  const [reload, setReload] = useState(false)\n  const [collapse, setCollapse] = useState(true)\n  const [visibility, setVisibility] = useState(true)\n\n  /**\n   ** If custom icon is defined then consider that else default icons\n   */\n  const Icons = {\n    collapse: collapseIcon ? collapseIcon : ChevronDown,\n    remove: removeIcon ? removeIcon : X,\n    reload: reloadIcon ? reloadIcon : RotateCw\n  }\n\n  // ** Action to call\n  const callAction = action => {\n    switch (action) {\n      case 'collapse':\n        return setCollapse(!collapse)\n      case 'remove':\n        return setVisibility(false)\n      case 'reload':\n        return setReload(true)\n      default:\n    }\n  }\n\n  // ** Renders card actions\n  const renderIcons = () => {\n    /**\n     ** IF: user passes array of actions then loop through them & render all of the actions\n     ** ELSE: render single action\n     */\n\n    if (Array.isArray(actions)) {\n      return actions.map((action, i) => {\n        const Tag = Icons[action]\n        return (\n          <Tag\n            key={i}\n            className={classnames('cursor-pointer', {\n              'me-50': i < actions.length - 1\n            })}\n            size={15}\n            onClick={() => callAction(action)}\n          />\n        )\n      })\n    } else {\n      const Tag = Icons[actions]\n      return <Tag className='cursor-pointer' size={15} onClick={() => callAction(actions)} />\n    }\n  }\n\n  // ** Ends reload\n  const removeReload = () => {\n    setReload(false)\n  }\n\n  // ** If user passes endReload function call it.\n  useEffect(() => {\n    if (reload) {\n      endReload(removeReload)\n    }\n  })\n\n  // ** If user passes collapse action then return <Collapse> as Wrapper else return <Fragment>\n  const CollapseWrapper = actions === 'collapse' || actions.includes('collapse') ? Collapse : Fragment\n\n  // ** If user passes reload action then return <BlockUi> as Wrapper else return <Fragment>\n  const BlockUiWrapper = actions === 'reload' || actions.includes('reload') ? UiLoader : Fragment\n\n  return (\n    <BlockUiWrapper\n      /*eslint-disable */\n      {...(actions === 'reload' || actions.includes('reload')\n        ? {\n            blocking: reload\n          }\n        : {})}\n      /*eslint-enable */\n    >\n      <Card\n        className={classnames('card-action', {\n          'd-none': !visibility\n        })}\n      >\n        <CardHeader>\n          <CardTitle tag='h4'>{title}</CardTitle>\n          <div className='action-icons'>{renderIcons()}</div>\n        </CardHeader>\n        <CollapseWrapper {...(actions === 'collapse' || actions.includes('collapse') ? { isOpen: collapse } : {})}>\n          {children}\n        </CollapseWrapper>\n      </Card>\n    </BlockUiWrapper>\n  )\n}\n\nexport default CardActions\n\n// ** PropTypes\nCardActions.propTypes = {\n  removeIcon: PropTypes.any,\n  reloadIcon: PropTypes.any,\n  collapseIcon: PropTypes.any,\n  title: PropTypes.string.isRequired,\n  actions: PropTypes.oneOfType([PropTypes.string, PropTypes.arrayOf(PropTypes.string)]).isRequired,\n  endReload(props) {\n    // ** User passes reload action and doesn't pass endReload then return Error\n    if (\n      (props['actions'] === 'reload' && props['endReload'] === undefined) ||\n      (props['actions'].includes('reload') && props['endReload'] === undefined)\n    ) {\n      return new Error('Please provide a function to end reload!')\n    }\n  }\n}\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Custom Components\nimport Breadcrumbs from '@components/breadcrumbs'\nimport CardAction from '@components/card-actions'\n\n// ** Icons Imports\nimport { ChevronDown, RotateCw, X } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { CardBody, CardText, Row, Col, Table } from 'reactstrap'\n\nconst CardActions = () => {\n  return (\n    <Fragment>\n      <Breadcrumbs title='Card Actions' data={[{ title: 'Cards' }, { title: 'Card Actions' }]} />\n      <Row>\n        <Col sm='12'>\n          <CardAction\n            title='Card Actions'\n            actions={['collapse', 'reload', 'remove']}\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <Table responsive bordered>\n                <thead>\n                  <tr>\n                    <th>Action</th>\n                    <th>Icon</th>\n                    <th>Details</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  <tr>\n                    <td>Collapse</td>\n                    <td className='text-center'>\n                      <ChevronDown className='collapse-icon' size={15} />\n                    </td>\n                    <td> Collapse card content using collapse action.</td>\n                  </tr>\n                  <tr>\n                    <td>Refresh Content</td>\n                    <td className='text-center'>\n                      <RotateCw size={15} />\n                    </td>\n                    <td>Refresh your card content using refresh action.</td>\n                  </tr>\n                  <tr>\n                    <td>Remove Card</td>\n                    <td className='text-center'>\n                      <X size={15} />\n                    </td>\n                    <td> Remove card from page using remove card action</td>\n                  </tr>\n                </tbody>\n              </Table>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n      <Row>\n        <Col md='6' sm='12'>\n          <CardAction title='Collapse' actions='collapse'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can create a collapsible content by using our <code>CardAction</code> component and by passing prop{' '}\n                <code>actions='collapse'</code>.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <ChevronDown size={15} /> to see card collapse in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction\n            title='Reload'\n            actions='reload'\n            endReload={endLoading => {\n              setTimeout(() => endLoading(), 2000)\n            }}\n          >\n            <CardBody className='pt-0'>\n              <CardText>\n                To create a re-loadable card pass prop <code>actions='reload'</code> and pass prop{' '}\n                <code>endReload</code> to end the loading.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n        <Col md='6' sm='12'>\n          <CardAction title='Remove' actions='remove'>\n            <CardBody className='pt-0'>\n              <CardText>\n                You can add refresh content action to card by adding class <code>.card-reload</code> with your card tag,\n                and add conditional spinner into card body to show when card is refreshing.\n              </CardText>\n              <CardText className='mb-0'>\n                Click on <RotateCw size={15} /> to see card refresh in action\n              </CardText>\n            </CardBody>\n          </CardAction>\n        </Col>\n      </Row>\n    </Fragment>\n  )\n}\nexport default CardActions\n","// ** React Imports\nimport { Fragment } from 'react'\nimport { Link } from 'react-router-dom'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Grid, CheckSquare, MessageSquare, Mail, Calendar } from 'react-feather'\n\n// ** Reactstrap Imports\nimport {\n  Breadcrumb,\n  DropdownMenu,\n  DropdownItem,\n  BreadcrumbItem,\n  DropdownToggle,\n  UncontrolledButtonDropdown\n} from 'reactstrap'\n\nconst BreadCrumbs = props => {\n  // ** Props\n  const { data, title } = props\n\n  const renderBreadCrumbs = () => {\n    return data.map((item, index) => {\n      const Wrapper = item.link ? Link : Fragment\n      const isLastItem = data.length - 1 === index\n      return (\n        <BreadcrumbItem\n          tag='li'\n          key={index}\n          active={!isLastItem}\n          className={classnames({ 'text-primary': !isLastItem })}\n        >\n          <Wrapper {...(item.link ? { to: item.link } : {})}>{item.title}</Wrapper>\n        </BreadcrumbItem>\n      )\n    })\n  }\n\n  return (\n    <div className='content-header row'>\n      <div className='content-header-left col-md-9 col-12 mb-2'>\n        <div className='row breadcrumbs-top'>\n          <div className='col-12'>\n            {title ? <h2 className='content-header-title float-start mb-0'>{title}</h2> : ''}\n            <div className='breadcrumb-wrapper vs-breadcrumbs d-sm-block d-none col-12'>\n              <Breadcrumb>\n                <BreadcrumbItem tag='li'>\n                  <Link to='/'>Home</Link>\n                </BreadcrumbItem>\n                {renderBreadCrumbs()}\n              </Breadcrumb>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className='content-header-right text-md-end col-md-3 col-12 d-md-block d-none'>\n        <div className='breadcrumb-right dropdown'>\n          <UncontrolledButtonDropdown>\n            <DropdownToggle color='primary' className='btn-icon btn-round dropdown-toggle'>\n              <Grid size={14} />\n            </DropdownToggle>\n            <DropdownMenu tag='ul' end>\n              <DropdownItem tag={Link} to='/apps/todo'>\n                <CheckSquare className='me-1' size={14} />\n                <span className='align-middle'>Todo</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/chat'>\n                <MessageSquare className='me-1' size={14} />\n                <span className='align-middle'>Chat</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/email'>\n                <Mail className='me-1' size={14} />\n                <span className='align-middle'>Email</span>\n              </DropdownItem>\n              <DropdownItem tag={Link} to='/apps/calendar'>\n                <Calendar className='me-1' size={14} />\n                <span className='align-middle'>Calendar</span>\n              </DropdownItem>\n            </DropdownMenu>\n          </UncontrolledButtonDropdown>\n        </div>\n      </div>\n    </div>\n  )\n}\nexport default BreadCrumbs\n\n// ** PropTypes\nBreadCrumbs.propTypes = {\n  title: Proptypes.string.isRequired,\n  data: Proptypes.arrayOf(\n    Proptypes.shape({\n      link: Proptypes.string,\n      title: Proptypes.string.isRequired\n    })\n  )\n}\n","// ** React Imports\nimport { Fragment } from 'react'\n\n// ** Third Party Components\nimport Proptypes from 'prop-types'\nimport classnames from 'classnames'\n\n// ** Reactstrap Imports\nimport { Spinner } from 'reactstrap'\n\n// ** Styles\nimport './ui-loader.scss'\n\nconst UILoader = props => {\n  const { children, blocking, loader, className, tag, overlayColor } = props\n\n  const Tag = tag\n\n  return (\n    <Tag className={classnames('ui-loader', { [className]: className, show: blocking })}>\n      {children}\n      {blocking ? (\n        <Fragment>\n          <div\n            className='overlay' /*eslint-disable */\n            {...(blocking && overlayColor ? { style: { backgroundColor: overlayColor } } : {})}\n            /*eslint-enable */\n          ></div>\n          <div className='loader'>{loader}</div>\n        </Fragment>\n      ) : null}\n    </Tag>\n  )\n}\n\nexport default UILoader\n\nUILoader.defaultProps = {\n  tag: 'div',\n  blocking: false,\n  loader: <Spinner color='primary' />\n}\n\nUILoader.propTypes = {\n  tag: Proptypes.string,\n  loader: Proptypes.any,\n  className: Proptypes.string,\n  overlayColor: Proptypes.string,\n  blocking: Proptypes.bool.isRequired\n}\n"],"sourceRoot":""}