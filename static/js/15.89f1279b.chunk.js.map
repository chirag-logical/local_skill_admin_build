{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","role","className","size","color","icon","onClick","toast","dismiss","id","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","to","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","data","Object","values","every","field","length","body","password","emailAddress","loginEmail","url","API","axios","post","then","response","status","userData","avatar","email","extras","eCommerceCartItemsCount","fullName","username","userId","abilityValue","action","subject","accessToken","refreshToken","handleLogin","update","getHomeRouteForLoggedInUser","catch","err","console","log","detail","finally","key","type","for","render","autoFocus","placeholder","invalid","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/15.89f1279b.chunk.js","sourcesContent":["// ** React Imports\nimport { useContext } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Coffee, X } from 'react-feather'\n\n// ** Actions\nimport { handleLogin } from '@store/authentication'\n\n// ** Context\nimport { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Button, CardText, CardTitle } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport axios from 'axios'\nimport API from '../../../configs/api'\n\nconst ToastContent = ({ t, name, role }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>{role}</span>\n      </div>\n    </div>\n  )\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const ability = useContext(AbilityContext)\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm()\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = (data) => {\n    if (Object.values(data).every(field => field.length > 0)) {\n      const body = {\n        password: data.password,\n        emailAddress: data.loginEmail\n      }\n      const url = `${API}auth/login`\n      axios\n        .post(url, body)\n        .then((response) => {\n          if (response.status === 200) {\n            const userData = {\n              avatar: \"/static/media/avatar-s-11.1d46cc62.jpg\",\n              email: body.emailAddress,\n              extras: { eCommerceCartItemsCount: 5 },\n              fullName: \"Local Skills\",\n              username: \"localskills\",\n              id: response.data.userId\n            }\n            const abilityValue = [{ action: \"manage\", subject: \"all\" }]\n            const data = {\n              ...userData,\n              role: \"admin\",\n              ability: abilityValue,\n              accessToken: response.data.accessToken,\n              refreshToken: response.data.refreshToken\n            }\n            dispatch(handleLogin(data))\n            ability.update(abilityValue)\n            navigate(getHomeRouteForLoggedInUser(data.role))\n            toast((t) => (\n              <ToastContent\n                t={t}\n                name={`Login Successfully`}\n                role={`You have successfully logged in as an ${data.role || 'admin'} user to Local Skills. Now you can start to explore. Enjoy!`}\n              />\n            ))\n          }\n        })\n        .catch((err) => {\n          console.log(\"error here\", err)\n          toast((t) => (\n            <ToastContent\n              t={t}\n              name={`Login Failed`}\n              role={`${err.response.data.errors[0].detail}`}\n            />\n          ))\n        })\n        .finally(() => {\n        })\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\n            <defs>\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\n                <stop stopColor='#000000' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\n              </linearGradient>\n            </defs>\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\n                  <path\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\n                    id='Path'\n                    className='text-primary'\n                    style={{ fill: 'currentColor' }}\n                  ></path>\n                  <path\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\n                    id='Path'\n                    fill='url(#linearGradient-1)'\n                    opacity='0.2'\n                  ></path>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.049999997'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\n                  ></polygon>\n                  <polygon\n                    id='Path-2'\n                    fill='#000000'\n                    opacity='0.099999994'\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\n                  ></polygon>\n                  <polygon\n                    id='Path-3'\n                    fill='url(#linearGradient-2)'\n                    opacity='0.099999994'\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\n                  ></polygon>\n                </g>\n              </g>\n            </g>\n          </svg>\n          <h2 className='brand-text text-primary ms-1'>Local Skills</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Welcome to Local Skills! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='loginEmail'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button type='submit' color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n            {/* <p className='text-center mt-2'>\n              <span className='me-25'>New on our platform?</span>\n              <Link to='/register'>\n                <span>Create an account</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div> */}\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}