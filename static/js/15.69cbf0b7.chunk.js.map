{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","role","className","size","color","icon","onClick","toast","dismiss","id","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","to","e","preventDefault","viewBox","version","height","x1","y1","x2","y2","stopColor","offset","stopOpacity","stroke","strokeWidth","fill","fillRule","transform","d","style","opacity","points","lg","sm","src","alt","md","tag","onSubmit","data","getAllData","Object","values","every","field","length","body","password","emailAddress","loginEmail","url","API","axios","post","then","response","status","userData","avatar","email","extras","eCommerceCartItemsCount","fullName","username","userId","abilityValue","action","subject","accessToken","refreshToken","handleLogin","update","getHomeRouteForLoggedInUser","catch","err","console","log","detail","finally","key","type","for","render","autoFocus","placeholder","invalid","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/15.69cbf0b7.chunk.js","sourcesContent":["// ** React Imports\r\nimport { useContext } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\n\r\n// ** Custom Hooks\r\nimport { useSkin } from '@hooks/useSkin'\r\n\r\n// ** Third Party Components\r\nimport toast from 'react-hot-toast'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useForm, Controller } from 'react-hook-form'\r\nimport { Coffee, X } from 'react-feather'\r\n\r\n// ** Actions\r\nimport { handleLogin } from '@store/authentication'\r\n\r\n// ** Context\r\nimport { AbilityContext } from '@src/utility/context/Can'\r\n\r\n// ** Custom Components\r\nimport Avatar from '@components/avatar'\r\nimport InputPasswordToggle from '@components/input-password-toggle'\r\n\r\n// ** Utils\r\nimport { getHomeRouteForLoggedInUser } from '@utils'\r\n\r\n// ** Reactstrap Imports\r\nimport { Row, Col, Form, Input, Label, Button, CardText, CardTitle } from 'reactstrap'\r\n\r\n// ** Styles\r\nimport '@styles/react/pages/page-authentication.scss'\r\nimport axios from 'axios'\r\nimport API from '../../../configs/api'\r\nimport { getAllData } from '../../userList/store'\r\n\r\nconst ToastContent = ({ t, name, role }) => {\r\n  return (\r\n    <div className='d-flex'>\r\n      <div className='me-1'>\r\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\r\n      </div>\r\n      <div className='d-flex flex-column'>\r\n        <div className='d-flex justify-content-between'>\r\n          <h6>{name}</h6>\r\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\r\n        </div>\r\n        <span>{role}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Login = () => {\r\n  // ** Hooks\r\n  const { skin } = useSkin()\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n  const ability = useContext(AbilityContext)\r\n  const {\r\n    control,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors }\r\n  } = useForm()\r\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\r\n  source = require(`@src/assets/images/pages/${illustration}`).default\r\n  \r\n  const onSubmit = (data) => {\r\n    dispatch(getAllData())\r\n    if (Object.values(data).every(field => field.length > 0)) {\r\n      const body = {\r\n        password: data.password,\r\n        emailAddress: data.loginEmail\r\n      }\r\n      const url = `${API}auth/login`\r\n      axios\r\n        .post(url, body)\r\n        .then((response) => {\r\n          if (response.status === 200) {\r\n            const userData = {\r\n              avatar: \"/static/media/avatar-s-11.1d46cc62.jpg\",\r\n              email: body.emailAddress,\r\n              extras: { eCommerceCartItemsCount: 5 },\r\n              fullName: \"Local Skills\",\r\n              username: \"localskills\",\r\n              id: response.data.userId\r\n            }\r\n            const abilityValue = [{ action: \"manage\", subject: \"all\" }]\r\n            const data = {\r\n              ...userData,\r\n              role: \"admin\",\r\n              ability: abilityValue,\r\n              accessToken: response.data.accessToken,\r\n              refreshToken: response.data.refreshToken\r\n            }\r\n            dispatch(handleLogin(data))\r\n            ability.update(abilityValue)\r\n            navigate(getHomeRouteForLoggedInUser(data.role))\r\n            toast((t) => (\r\n              <ToastContent\r\n                t={t}\r\n                name={`Login Successfully`}\r\n                role={`You have successfully logged in as an ${data.role || 'admin'} user to Local Skills. Now you can start to explore. Enjoy!`}\r\n              />\r\n            ))\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          console.log(\"error here\", err)\r\n          toast((t) => (\r\n            <ToastContent\r\n              t={t}\r\n              name={`Login Failed`}\r\n              role={`${err.response.data.errors[0].detail}`}\r\n            />\r\n          ))\r\n        })\r\n        .finally(() => {\r\n        })\r\n    } else {\r\n      for (const key in data) {\r\n        if (data[key].length === 0) {\r\n          setError(key, {\r\n            type: 'manual'\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='auth-wrapper auth-cover'>\r\n      <Row className='auth-inner m-0'>\r\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()}>\r\n          <svg viewBox='0 0 139 95' version='1.1' height='28'>\r\n            <defs>\r\n              <linearGradient x1='100%' y1='10.5120544%' x2='50%' y2='89.4879456%' id='linearGradient-1'>\r\n                <stop stopColor='#000000' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n              <linearGradient x1='64.0437835%' y1='46.3276743%' x2='37.373316%' y2='100%' id='linearGradient-2'>\r\n                <stop stopColor='#EEEEEE' stopOpacity='0' offset='0%'></stop>\r\n                <stop stopColor='#FFFFFF' offset='100%'></stop>\r\n              </linearGradient>\r\n            </defs>\r\n            <g id='Page-1' stroke='none' strokeWidth='1' fill='none' fillRule='evenodd'>\r\n              <g id='Artboard' transform='translate(-400.000000, -178.000000)'>\r\n                <g id='Group' transform='translate(400.000000, 178.000000)'>\r\n                  <path\r\n                    d='M-5.68434189e-14,2.84217094e-14 L39.1816085,2.84217094e-14 L69.3453773,32.2519224 L101.428699,2.84217094e-14 L138.784583,2.84217094e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L6.71554594,44.4188507 C2.46876683,39.9813776 0.345377275,35.1089553 0.345377275,29.8015838 C0.345377275,24.4942122 0.230251516,14.560351 -5.68434189e-14,2.84217094e-14 Z'\r\n                    id='Path'\r\n                    className='text-primary'\r\n                    style={{ fill: 'currentColor' }}\r\n                  ></path>\r\n                  <path\r\n                    d='M69.3453773,32.2519224 L101.428699,1.42108547e-14 L138.784583,1.42108547e-14 L138.784199,29.8015838 C137.958931,37.3510206 135.784352,42.5567762 132.260463,45.4188507 C128.736573,48.2809251 112.33867,64.5239941 83.0667527,94.1480575 L56.2750821,94.1480575 L32.8435758,70.5039241 L69.3453773,32.2519224 Z'\r\n                    id='Path'\r\n                    fill='url(#linearGradient-1)'\r\n                    opacity='0.2'\r\n                  ></path>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.049999997'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 54.0490008 16.1851325'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-2'\r\n                    fill='#000000'\r\n                    opacity='0.099999994'\r\n                    points='69.3922914 32.4202615 32.8435758 70.5039241 58.3683556 20.7402338'\r\n                  ></polygon>\r\n                  <polygon\r\n                    id='Path-3'\r\n                    fill='url(#linearGradient-2)'\r\n                    opacity='0.099999994'\r\n                    points='101.428699 0 83.0667527 94.1480575 130.378721 47.0740288'\r\n                  ></polygon>\r\n                </g>\r\n              </g>\r\n            </g>\r\n          </svg>\r\n          <h2 className='brand-text text-primary ms-1'>Local Skills</h2>\r\n        </Link>\r\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\r\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\r\n            <img className='img-fluid' src={source} alt='Login Cover' />\r\n          </div>\r\n        </Col>\r\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\r\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\r\n            <CardTitle tag='h2' className='fw-bold mb-1'>\r\n              Welcome to Local Skills! 👋\r\n            </CardTitle>\r\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\r\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\r\n              <div className='mb-1'>\r\n                <Label className='form-label' for='login-email'>\r\n                  Email\r\n                </Label>\r\n                <Controller\r\n                  id='loginEmail'\r\n                  name='loginEmail'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <Input\r\n                      autoFocus\r\n                      type='email'\r\n                      placeholder='john@example.com'\r\n                      invalid={errors.loginEmail && true}\r\n                      {...field}\r\n                    />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='mb-1'>\r\n                <div className='d-flex justify-content-between'>\r\n                  <Label className='form-label' for='login-password'>\r\n                    Password\r\n                  </Label>\r\n                  <Link to='/forgot-password'>\r\n                    <small>Forgot Password?</small>\r\n                  </Link>\r\n                </div>\r\n                <Controller\r\n                  id='password'\r\n                  name='password'\r\n                  control={control}\r\n                  render={({ field }) => (\r\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\r\n                  )}\r\n                />\r\n              </div>\r\n              <div className='form-check mb-1'>\r\n                <Input type='checkbox' id='remember-me' />\r\n                <Label className='form-check-label' for='remember-me'>\r\n                  Remember Me\r\n                </Label>\r\n              </div>\r\n              <Button type='submit' color='primary' block>\r\n                Sign in\r\n              </Button>\r\n            </Form>\r\n            {/* <p className='text-center mt-2'>\r\n              <span className='me-25'>New on our platform?</span>\r\n              <Link to='/register'>\r\n                <span>Create an account</span>\r\n              </Link>\r\n            </p>\r\n            <div className='divider my-2'>\r\n              <div className='divider-text'>or</div>\r\n            </div>\r\n            <div className='auth-footer-btn d-flex justify-content-center'>\r\n              <Button color='facebook'>\r\n                <Facebook size={14} />\r\n              </Button>\r\n              <Button color='twitter'>\r\n                <Twitter size={14} />\r\n              </Button>\r\n              <Button color='google'>\r\n                <Mail size={14} />\r\n              </Button>\r\n              <Button className='me-0' color='github'>\r\n                <GitHub size={14} />\r\n              </Button>\r\n            </div> */}\r\n          </Col>\r\n        </Col>\r\n      </Row>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Login\r\n","// ** React Imports\r\nimport { Fragment, useState, forwardRef } from 'react'\r\n\r\n// ** Third Party Components\r\nimport PropTypes from 'prop-types'\r\nimport classnames from 'classnames'\r\nimport { Eye, EyeOff } from 'react-feather'\r\n\r\n// ** Reactstrap Imports\r\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\r\n\r\nconst InputPasswordToggle = forwardRef((props, ref) => {\r\n  // ** Props\r\n  const {\r\n    label,\r\n    hideIcon,\r\n    showIcon,\r\n    visible,\r\n    className,\r\n    htmlFor,\r\n    placeholder,\r\n    iconSize,\r\n    inputClassName,\r\n    invalid,\r\n    ...rest\r\n  } = props\r\n\r\n  // ** State\r\n  const [inputVisibility, setInputVisibility] = useState(visible)\r\n\r\n  // ** Renders Icon Based On Visibility\r\n  const renderIcon = () => {\r\n    const size = iconSize ? iconSize : 14\r\n\r\n    if (inputVisibility === false) {\r\n      return hideIcon ? hideIcon : <Eye size={size} />\r\n    } else {\r\n      return showIcon ? showIcon : <EyeOff size={size} />\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Fragment>\r\n      {label ? (\r\n        <Label className='form-label' for={htmlFor}>\r\n          {label}\r\n        </Label>\r\n      ) : null}\r\n      <InputGroup\r\n        className={classnames({\r\n          [className]: className,\r\n          'is-invalid': invalid\r\n        })}\r\n      >\r\n        <Input\r\n          ref={ref}\r\n          invalid={invalid}\r\n          type={inputVisibility === false ? 'password' : 'text'}\r\n          placeholder={placeholder ? placeholder : '············'}\r\n          className={classnames({\r\n            [inputClassName]: inputClassName\r\n          })}\r\n          /*eslint-disable */\r\n          {...(label && htmlFor\r\n            ? {\r\n                id: htmlFor\r\n              }\r\n            : {})}\r\n          {...rest}\r\n          /*eslint-enable */\r\n        />\r\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\r\n          {renderIcon()}\r\n        </InputGroupText>\r\n      </InputGroup>\r\n    </Fragment>\r\n  )\r\n})\r\n\r\nexport default InputPasswordToggle\r\n\r\n// ** PropTypes\r\nInputPasswordToggle.propTypes = {\r\n  invalid: PropTypes.bool,\r\n  hideIcon: PropTypes.node,\r\n  showIcon: PropTypes.node,\r\n  visible: PropTypes.bool,\r\n  className: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  iconSize: PropTypes.number,\r\n  inputClassName: PropTypes.string,\r\n  label(props, propName) {\r\n    // ** If label is defined and htmlFor is undefined throw error\r\n    if (props[propName] && props['htmlFor'] === 'undefined') {\r\n      throw new Error('htmlFor prop is required when label prop is present')\r\n    }\r\n  },\r\n  htmlFor(props, propName) {\r\n    // ** If htmlFor is defined and label is undefined throw error\r\n    if (props[propName] && props['label'] === 'undefined') {\r\n      throw new Error('label prop is required when htmlFor prop is present')\r\n    }\r\n  }\r\n}\r\n\r\n// ** Default Props\r\nInputPasswordToggle.defaultProps = {\r\n  visible: false\r\n}\r\n"],"sourceRoot":""}