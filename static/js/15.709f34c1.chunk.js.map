{"version":3,"sources":["views/pages/authentication/Login.js","@core/components/input-password-toggle/index.js"],"names":["ToastContent","t","name","role","className","size","color","icon","onClick","toast","dismiss","id","Login","skin","useSkin","dispatch","useDispatch","navigate","useNavigate","ability","useContext","AbilityContext","useForm","control","setError","handleSubmit","errors","formState","illustration","source","require","default","to","e","preventDefault","style","display","alignItems","height","width","borderRadius","src","alt","lg","sm","md","tag","onSubmit","data","getAllData","Object","values","every","field","length","body","password","emailAddress","loginEmail","url","API","axios","post","then","response","status","userData","avatar","email","extras","eCommerceCartItemsCount","fullName","username","userId","abilityValue","action","subject","accessToken","refreshToken","handleLogin","update","getHomeRouteForLoggedInUser","catch","err","console","log","detail","finally","key","type","for","render","autoFocus","placeholder","invalid","block","InputPasswordToggle","forwardRef","props","ref","label","hideIcon","showIcon","visible","htmlFor","iconSize","inputClassName","rest","useState","inputVisibility","setInputVisibility","classnames","renderIcon","defaultProps"],"mappings":"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","file":"static/js/15.709f34c1.chunk.js","sourcesContent":["// ** React Imports\nimport { useContext } from 'react'\nimport { Link, useNavigate } from 'react-router-dom'\n\n// ** Custom Hooks\nimport { useSkin } from '@hooks/useSkin'\n\n// ** Third Party Components\nimport toast from 'react-hot-toast'\nimport { useDispatch } from 'react-redux'\nimport { useForm, Controller } from 'react-hook-form'\nimport { Coffee, X } from 'react-feather'\n\n// ** Actions\nimport { handleLogin } from '@store/authentication'\n\n// ** Context\nimport { AbilityContext } from '@src/utility/context/Can'\n\n// ** Custom Components\nimport Avatar from '@components/avatar'\nimport InputPasswordToggle from '@components/input-password-toggle'\n\n// ** Utils\nimport { getHomeRouteForLoggedInUser } from '@utils'\n\n// ** Reactstrap Imports\nimport { Row, Col, Form, Input, Label, Button, CardText, CardTitle } from 'reactstrap'\n\n// ** Styles\nimport '@styles/react/pages/page-authentication.scss'\nimport axios from 'axios'\nimport API from '../../../configs/api'\nimport { getAllData } from '../../userList/store'\n\nconst ToastContent = ({ t, name, role }) => {\n  return (\n    <div className='d-flex'>\n      <div className='me-1'>\n        <Avatar size='sm' color='success' icon={<Coffee size={12} />} />\n      </div>\n      <div className='d-flex flex-column'>\n        <div className='d-flex justify-content-between'>\n          <h6>{name}</h6>\n          <X size={12} className='cursor-pointer' onClick={() => toast.dismiss(t.id)} />\n        </div>\n        <span>{role}</span>\n      </div>\n    </div>\n  )\n}\n\nconst Login = () => {\n  // ** Hooks\n  const { skin } = useSkin()\n  const dispatch = useDispatch()\n  const navigate = useNavigate()\n  const ability = useContext(AbilityContext)\n  const {\n    control,\n    setError,\n    handleSubmit,\n    formState: { errors }\n  } = useForm()\n  const illustration = skin === 'dark' ? 'login-v2-dark.svg' : 'login-v2.svg',\n    source = require(`@src/assets/images/pages/${illustration}`).default\n\n  const onSubmit = (data) => {\n    dispatch(getAllData())\n    if (Object.values(data).every(field => field.length > 0)) {\n      const body = {\n        password: data.password,\n        emailAddress: data.loginEmail\n      }\n      const url = `${API}auth/login`\n      axios\n        .post(url, body)\n        .then((response) => {\n          if (response.status === 200) {\n            const userData = {\n              avatar: \"/static/media/avatar-s-11.1d46cc62.jpg\",\n              email: body.emailAddress,\n              extras: { eCommerceCartItemsCount: 5 },\n              fullName: \"Local Skills\",\n              username: \"localskills\",\n              id: response.data.userId\n            }\n            const abilityValue = [{ action: \"manage\", subject: \"all\" }]\n            const data = {\n              ...userData,\n              role: \"admin\",\n              ability: abilityValue,\n              accessToken: response.data.accessToken,\n              refreshToken: response.data.refreshToken\n            }\n            dispatch(handleLogin(data))\n            ability.update(abilityValue)\n            navigate(getHomeRouteForLoggedInUser(data.role))\n            toast((t) => (\n              <ToastContent\n                t={t}\n                name={`Login Successfully`}\n                role={`You have successfully logged in as an ${data.role || 'admin'} user to Local Skills. Now you can start to explore. Enjoy!`}\n              />\n            ))\n          }\n        })\n        .catch((err) => {\n          console.log(\"error here\", err)\n          toast((t) => (\n            <ToastContent\n              t={t}\n              name={`Login Failed`}\n              role={`${err.response.data.errors[0].detail}`}\n            />\n          ))\n        })\n        .finally(() => {\n        })\n    } else {\n      for (const key in data) {\n        if (data[key].length === 0) {\n          setError(key, {\n            type: 'manual'\n          })\n        }\n      }\n    }\n  }\n\n  return (\n    <div className='auth-wrapper auth-cover'>\n      <Row className='auth-inner m-0'>\n        <Link className='brand-logo' to='/' onClick={e => e.preventDefault()} style={{display:'flex', alignItems:'center'}}>\n          <img style={{ height: '40px', width: '40px', borderRadius: '5px' }} src={require('@src/assets/images/logo/localskillsquare.png').default} alt=\"brand logo\" />\n          <h2 className='brand-text text-primary ms-1'>Local Skills</h2>\n        </Link>\n        <Col className='d-none d-lg-flex align-items-center p-5' lg='8' sm='12'>\n          <div className='w-100 d-lg-flex align-items-center justify-content-center px-5'>\n            <img className='img-fluid' src={source} alt='Login Cover' />\n          </div>\n        </Col>\n        <Col className='d-flex align-items-center auth-bg px-2 p-lg-5' lg='4' sm='12'>\n          <Col className='px-xl-2 mx-auto' sm='8' md='6' lg='12'>\n            <CardTitle tag='h2' className='fw-bold mb-1'>\n              Welcome to Local Skills! 👋\n            </CardTitle>\n            <CardText className='mb-2'>Please sign-in to your account and start the adventure</CardText>\n            <Form className='auth-login-form mt-2' onSubmit={handleSubmit(onSubmit)}>\n              <div className='mb-1'>\n                <Label className='form-label' for='login-email'>\n                  Email\n                </Label>\n                <Controller\n                  id='loginEmail'\n                  name='loginEmail'\n                  control={control}\n                  render={({ field }) => (\n                    <Input\n                      autoFocus\n                      type='email'\n                      placeholder='john@example.com'\n                      invalid={errors.loginEmail && true}\n                      {...field}\n                    />\n                  )}\n                />\n              </div>\n              <div className='mb-1'>\n                <div className='d-flex justify-content-between'>\n                  <Label className='form-label' for='login-password'>\n                    Password\n                  </Label>\n                  <Link to='/forgot-password'>\n                    <small>Forgot Password?</small>\n                  </Link>\n                </div>\n                <Controller\n                  id='password'\n                  name='password'\n                  control={control}\n                  render={({ field }) => (\n                    <InputPasswordToggle className='input-group-merge' invalid={errors.password && true} {...field} />\n                  )}\n                />\n              </div>\n              <div className='form-check mb-1'>\n                <Input type='checkbox' id='remember-me' />\n                <Label className='form-check-label' for='remember-me'>\n                  Remember Me\n                </Label>\n              </div>\n              <Button type='submit' color='primary' block>\n                Sign in\n              </Button>\n            </Form>\n            {/* <p className='text-center mt-2'>\n              <span className='me-25'>New on our platform?</span>\n              <Link to='/register'>\n                <span>Create an account</span>\n              </Link>\n            </p>\n            <div className='divider my-2'>\n              <div className='divider-text'>or</div>\n            </div>\n            <div className='auth-footer-btn d-flex justify-content-center'>\n              <Button color='facebook'>\n                <Facebook size={14} />\n              </Button>\n              <Button color='twitter'>\n                <Twitter size={14} />\n              </Button>\n              <Button color='google'>\n                <Mail size={14} />\n              </Button>\n              <Button className='me-0' color='github'>\n                <GitHub size={14} />\n              </Button>\n            </div> */}\n          </Col>\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nexport default Login\n","// ** React Imports\nimport { Fragment, useState, forwardRef } from 'react'\n\n// ** Third Party Components\nimport PropTypes from 'prop-types'\nimport classnames from 'classnames'\nimport { Eye, EyeOff } from 'react-feather'\n\n// ** Reactstrap Imports\nimport { InputGroup, Input, InputGroupText, Label } from 'reactstrap'\n\nconst InputPasswordToggle = forwardRef((props, ref) => {\n  // ** Props\n  const {\n    label,\n    hideIcon,\n    showIcon,\n    visible,\n    className,\n    htmlFor,\n    placeholder,\n    iconSize,\n    inputClassName,\n    invalid,\n    ...rest\n  } = props\n\n  // ** State\n  const [inputVisibility, setInputVisibility] = useState(visible)\n\n  // ** Renders Icon Based On Visibility\n  const renderIcon = () => {\n    const size = iconSize ? iconSize : 14\n\n    if (inputVisibility === false) {\n      return hideIcon ? hideIcon : <Eye size={size} />\n    } else {\n      return showIcon ? showIcon : <EyeOff size={size} />\n    }\n  }\n\n  return (\n    <Fragment>\n      {label ? (\n        <Label className='form-label' for={htmlFor}>\n          {label}\n        </Label>\n      ) : null}\n      <InputGroup\n        className={classnames({\n          [className]: className,\n          'is-invalid': invalid\n        })}\n      >\n        <Input\n          ref={ref}\n          invalid={invalid}\n          type={inputVisibility === false ? 'password' : 'text'}\n          placeholder={placeholder ? placeholder : '············'}\n          className={classnames({\n            [inputClassName]: inputClassName\n          })}\n          /*eslint-disable */\n          {...(label && htmlFor\n            ? {\n                id: htmlFor\n              }\n            : {})}\n          {...rest}\n          /*eslint-enable */\n        />\n        <InputGroupText className='cursor-pointer' onClick={() => setInputVisibility(!inputVisibility)}>\n          {renderIcon()}\n        </InputGroupText>\n      </InputGroup>\n    </Fragment>\n  )\n})\n\nexport default InputPasswordToggle\n\n// ** PropTypes\nInputPasswordToggle.propTypes = {\n  invalid: PropTypes.bool,\n  hideIcon: PropTypes.node,\n  showIcon: PropTypes.node,\n  visible: PropTypes.bool,\n  className: PropTypes.string,\n  placeholder: PropTypes.string,\n  iconSize: PropTypes.number,\n  inputClassName: PropTypes.string,\n  label(props, propName) {\n    // ** If label is defined and htmlFor is undefined throw error\n    if (props[propName] && props['htmlFor'] === 'undefined') {\n      throw new Error('htmlFor prop is required when label prop is present')\n    }\n  },\n  htmlFor(props, propName) {\n    // ** If htmlFor is defined and label is undefined throw error\n    if (props[propName] && props['label'] === 'undefined') {\n      throw new Error('label prop is required when htmlFor prop is present')\n    }\n  }\n}\n\n// ** Default Props\nInputPasswordToggle.defaultProps = {\n  visible: false\n}\n"],"sourceRoot":""}